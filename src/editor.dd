(include "editor.ddh")

(class_function world_editor void create ()
	(group

	(avdl_engine_setFPS 120)
	(avdl_engine_setVSync 1)

	# default font
	(this.font.set (asset "assets/nishiki_teki.ttf" DD_PLY) 4)

	#(dd_clearColour 0.5 0.2 0.3 1.0)
	#(dd_clearColour 0.351 0.622 0.793 1.0)
	(dd_clearColour 0.5 0.1 0.2 1.0)

	# default camera
	(this.camera_position.setf 0 1 5)
	(this.camera_rotation.setf 0 0 0)

	(dd_matrix_identity this.camera_transform)
	(dd_matrix_identity this.camera_transform_rot)

	(= this.mouse_pressed 0)
	(= this.mouse_pin_x -1)
	(= this.mouse_pin_y -1)

	# grid
	(this.grid.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.grid.set_colour 0.1 0.5 0.1)

	# button
	(= this.buttonTotal 2)
	#(this.button.mesh.load (asset "assets/button.ply" DD_PLY))
	(this.button[0].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[0].mesh.set_colour 1.0 1.0 1.0)
	(this.button[0].label.setFont this.font)
	(this.button[0].label.setText "^")

	(this.button[1].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[1].mesh.set_colour 1.0 1.0 1.0)
	(this.button[1].label.setFont this.font)
	(this.button[1].label.setText "v")

	(= this.selection -1)

	)
)

(class_function world_editor void onload ()
	(group
	)
)

(class_function world_editor void resize ()
	(group
	(this.button[0].setSize 1 1)
	(this.button[0].setProportionalPosition 0.85 0.15)
	(this.button[0].setProportionalWidth 0.2)
	(this.button[0].setProportionalSize 0.8)
	(this.button[0].resize)

	(this.button[1].setSize 1 1)
	(this.button[1].setProportionalPosition 0.15 0.15)
	(this.button[1].setProportionalWidth 0.2)
	(this.button[1].setProportionalSize 0.8)
	(this.button[1].resize)
	)
)

(class_function world_editor void update (group float dt)
	(group

	# mouse is being pressed
	(if this.mouse_pressed
		(group

		# calculate mouse distance
		(def float diffx)
		(def float diffy)
		(= diffx (- (dd_mouse_x) this.mouse_pin_x))
		(= diffy (- (dd_mouse_y) this.mouse_pin_y))

		# rotate view based on mouse movement
		(this.ViewRotate (* diffx 0.1) (* diffy -0.1))

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

		)
	)

	(if (== this.selection 0)
		(this.ViewTranslate 0 0 -0.1)
	(== this.selection 1)
		(this.ViewTranslate 0 0 0.1)
	)

	)
) # update

(class_function world_editor void draw ()
	(group

	(dd_matrix_push)

	# camera
	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
#	(dd_rotatef
#		1
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)
	(dd_translatef
		(* (dd_vec3_getX this.camera_position) -1)
		(* (dd_vec3_getY this.camera_position) -1)
		(* (dd_vec3_getZ this.camera_position) -1)
	)

	# grid
	(for (def int i 0) (< i 50) (= i (+ i 1))
	(for (def int j 0) (< j 50) (= j (+ j 1))
		(group
		(dd_matrix_push)
		(dd_translatef
			(+ -5 (* i 2))
			-1
			(+ -5 (* j 2))
		)
		(dd_rotatef -90 1 0 0)
		#(dd_scalef 10 10 10)
		(this.grid.draw)
		(dd_matrix_pop)
		)
	))
	(dd_matrix_pop)

	(avdl_graphics_ClearDepth)

	# draw button
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)
		(this.button[i].applyTransform)
		(this.button[i].applyMatrixTransform)
		(this.button[i].drawRaw)
		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)
		(this.button[i].drawText)
		(dd_matrix_pop)
		)
	)

	# scene ?

	)
)

(class_function world_editor void key_input (group char key)
	(group
	(if (||
		(&& (== AVDL_VR 0) (== key 27))
		(&& (== AVDL_VR 1) (== key AVDL_INPUT_QUEST2_MENU))
		)
		(avdl_exit)
	# left arrow or 'a'
	(|| (== key 1) (== key 97))
		(this.ViewTranslate -0.1 0 0)
	# right arrow or 'd'
	(|| (== key 3) (== key 100))
		(this.ViewTranslate 0.1 0 0)
	# up arrow or 'w'
	(|| (== key 2) (== key 119))
		(this.ViewTranslate 0 0 -0.1)
	# down arrow or 's'
	(|| (== key 4) (== key 115))
		(this.ViewTranslate 0 0 0.1)
	# else
		(group
		)
	)
	)
)

(class_function world_editor void clean ()
	(group
	)
)

(class_function world_editor void mouse_input (group int button int type)
	(group

	(if (== type DD_INPUT_MOUSE_TYPE_PRESSED)
		(group

		# button pressed
		(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
			(if (this.button[i].hasMouseCollided)
				(= this.selection i)
			)
		)

		# nothing pressed
		(if (== this.selection -1)
			(group
			(= this.mouse_pressed 1)
			(= this.mouse_pin_x (dd_mouse_x))
			(= this.mouse_pin_y (dd_mouse_y))
			)
		)

		)
	(== type DD_INPUT_MOUSE_TYPE_RELEASED)
		(group
		# reset input
		(= this.selection -1)
		(= this.mouse_pressed 0)
		(= this.mouse_pin_x -1)
		(= this.mouse_pin_y -1)
		)
	)

	)
) # mouse input

(class_function world_editor void ViewRotate (group float x float y)
	(group
	(dd_vec3_addf this.camera_rotation y x 0)
#	(log "cam rot: %f %f %f"
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)
	)
)

(class_function world_editor void ViewTranslate (group float x float y float z)
	(group
#	(log "cam rot: %f %f %f"
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)

	# left-right
	(def dd_matrix rot)
	(dd_matrix_identity rot)
	(dd_matrix_rotate rot (* (dd_vec3_getY this.camera_rotation) -1)
		0
		1
		0
	)
	(dd_matrix_rotate rot (dd_vec3_getX this.camera_rotation)
		1
		0
		0
	)
	(def dd_vec4 cam_rot)
	(dd_vec4_set cam_rot
		x
		y
		z
		0
	)
	(dd_vec4_multiply cam_rot rot)
#	(log "movement: %f %f %f %f"
#		(dd_vec4_getX cam_rot)
#		(dd_vec4_getY cam_rot)
#		(dd_vec4_getZ cam_rot)
#		(dd_vec4_getW cam_rot)
#	)
	(dd_vec3_addf this.camera_position
		(dd_vec4_getX cam_rot)
		(dd_vec4_getY cam_rot)
		(dd_vec4_getZ cam_rot)
	)
	)
)

(include "editor.ddh")

(class_function world_editor void create ()
	(group

	(avdl_engine_setFPS 120)
	(avdl_engine_setVSync 1)

	# default font
	(this.font.set (asset "assets/nishiki_teki.ttf" DD_PLY) 4)

	#(for (def int i 0) (< i 6) (= i (+ i 1))
	#	(= this.skybox_texture[i] "assets/icon_64x64.png")
	#)
#	(= this.skybox_texture[0] "assets/skybox_right_flip.png")
#	(= this.skybox_texture[1] "assets/skybox_left_flip.png")
#	(= this.skybox_texture[2] "assets/skybox_top_flip.png")
#	(= this.skybox_texture[3] "assets/skybox_bottom_flip.png")
#	(= this.skybox_texture[5] "assets/skybox_back_flip.png")
#	(= this.skybox_texture[4] "assets/skybox_front_flip.png")

#	(= this.skybox_texture[0] "assets/stormydays_right_flip.png")
#	(= this.skybox_texture[1] "assets/stormydays_left_flip.png")
#	(= this.skybox_texture[2] "assets/stormydays_top_flep.png")
#	(= this.skybox_texture[3] "assets/stormydays_bottom_flep.png")
#	(= this.skybox_texture[5] "assets/stormydays_front_flip.png")
#	(= this.skybox_texture[4] "assets/stormydays_back_flip.png")

#	(= this.skybox_texture[0] "assets/interstellar_right_flip.png")
#	(= this.skybox_texture[1] "assets/interstellar_left_flip.png")
#	(= this.skybox_texture[2] "assets/interstellar_top_flep.png")
#	(= this.skybox_texture[3] "assets/interstellar_bottom_flip.png")
#	(= this.skybox_texture[5] "assets/interstellar_front_flip.png")
#	(= this.skybox_texture[4] "assets/interstellar_back_flip.png")
#	(this.skybox.set this.skybox_texture)

	#(dd_clearColour 0.5 0.2 0.3 1.0)
	#(dd_clearColour 0.351 0.622 0.793 1.0)
	(dd_clearColour 0.5 0.1 0.2 1.0)

	# default camera
	(this.camera_position.setf 0 1 5)
	(this.camera_rotation.setf 0 0 0)

	(dd_matrix_identity this.camera_transform)
	(dd_matrix_identity this.camera_transform_rot)

	(= this.mouse_pressed 0)
	(= this.mouse_pin_x -1)
	(= this.mouse_pin_y -1)

	# grid
	(this.grid.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.grid.set_colour 0.1 0.5 0.1)

	# selection
	(= this.selected_node 0)
	(this.selected.load (asset "assets/selected.ply" DD_PLY))

	# button
	(= this.buttonTotal 3)
	#(this.button.mesh.load (asset "assets/button.ply" DD_PLY))
	(this.button[0].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[0].mesh.set_colour 1.0 1.0 1.0)
	(this.button[0].label.setFont this.font)
	(this.button[0].label.setText "^")

	(this.button[1].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[1].mesh.set_colour 1.0 1.0 1.0)
	(this.button[1].label.setFont this.font)
	(this.button[1].label.setText "v")

	(this.button[2].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[2].mesh.set_colour 1.0 1.0 1.0)
	(this.button[2].label.setFont this.font)
	(this.button[2].label.setText "Add Box")

	(= this.selection -1)

	(= this.walksForward 0)
	(= this.walksRight 0)
	(= this.walksBack 0)
	(= this.walksLeft 0)

	(= this.hierarchy2 (this.hierarchy.AddChild))
	(avdl_node_JsonToNode "test.json" this.hierarchy2)

	(avdl_node_print this.hierarchy2)
	(this.AddCameraToStage)

	(dd_da_initStructRef this.mesh_component_array avdl_component_mesh)
	(dd_da_initStructRef this.terrain_component_array avdl_component_terrain)
        (avdl_node_AddComponentsToArray this.hierarchy2 this.mesh_component_array AVDL_COMPONENT_MESH_ENUM)
        (avdl_node_AddComponentsToArray this.hierarchy2 this.terrain_component_array AVDL_COMPONENT_TERRAIN_ENUM)

	# test select first node
	(def ref avdl_component_mesh m)
	(= m (dd_da_getDeref this.mesh_component_array 0))
	(def ref avdl_node node)
	(= this.selected_node (m.GetNode m))

	)
)

(class_function world_editor void onload ()
	(group
	)
)

(class_function world_editor void resize ()
	(group
	(this.button[0].setSize 1 1)
	(this.button[0].setProportionalPosition 0.85 0.15)
	(this.button[0].setProportionalWidth 0.2)
	(this.button[0].setProportionalSize 0.8)
	(this.button[0].resize)

	(this.button[1].setSize 1 1)
	(this.button[1].setProportionalPosition 0.15 0.15)
	(this.button[1].setProportionalWidth 0.2)
	(this.button[1].setProportionalSize 0.8)
	(this.button[1].resize)

	(this.button[2].setSize 1 1)
	(this.button[2].setProportionalPosition 0.85 0.85)
	(this.button[2].setProportionalWidth 0.2)
	(this.button[2].setProportionalSize 0.8)
	(this.button[2].resize)
	)
)

(class_function world_editor void update (group float dt)
	(group

	# mouse is being pressed
	(if this.mouse_pressed
		(group

		# calculate mouse distance
		(def float diffx)
		(def float diffy)
		(= diffx (- (dd_mouse_x) this.mouse_pin_x))
		(= diffy (- (dd_mouse_y) this.mouse_pin_y))

		# rotate view based on mouse movement
		(this.ViewRotate (* diffx 0.1) (* diffy -0.1))

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

		)
	)

	(if (== this.selection 0)
		(this.ViewTranslate 0 0 -0.1)
	(== this.selection 1)
		(this.ViewTranslate 0 0 0.1)
	)

	(float move_x 0)
	(float move_z 0)
	(if this.walksLeft (+= move_x 0.1))
	(if this.walksRight (-= move_x 0.1))
	(if this.walksForward (-= move_z 0.1))
	(if this.walksBack (+= move_z 0.1))

	(this.ViewTranslate move_x 0 move_z)

	)
) # update

(class_function world_editor void draw ()
	(group

#	# skybox
#	(dd_matrix_push)
#	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
#	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
#	(this.skybox.draw)
#	(dd_matrix_pop)
#	(avdl_graphics_ClearDepth)

	(dd_matrix_push)

	# camera
	(dd_multMatrixf_camera (this.camera_node.GetGlobalInverseMatrix))
#	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
#	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
##	(dd_rotatef
##		1
##		(dd_vec3_getX this.camera_rotation)
##		(dd_vec3_getY this.camera_rotation)
##		(dd_vec3_getZ this.camera_rotation)
##	)
#	(dd_translatef
#		(* (dd_vec3_getX this.camera_position) -1)
#		(* (dd_vec3_getY this.camera_position) -1)
#		(* (dd_vec3_getZ this.camera_position) -1)
#	)

	# grid
	(for (def int i 0) (< i 50) (= i (+ i 1))
	(for (def int j 0) (< j 50) (= j (+ j 1))
		(group
		(dd_matrix_push)
		(dd_translatef
			(+ -5 (* i 2))
			-1
			(+ -5 (* j 2))
		)
		(dd_rotatef -90 1 0 0)
		#(dd_scalef 10 10 10)
		(this.grid.draw)
		(dd_matrix_pop)
		)
	))

	# meshes
	(for (int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {

		(def ref avdl_component_mesh mesh)
		(= mesh (dd_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode mesh))


		(dd_matrix_push)
		(dd_multMatrixf (node.GetGlobalMatrix node))
		(if (== node this.selected_node)
			(this.selected.draw)
		)
		(mesh.draw mesh)
		(dd_matrix_pop)
	})

	#(log "terrains: %d" (dd_da_count this.terrain_component_array))
	# terrains
	(for (int i 0) (< i (dd_da_count this.terrain_component_array)) (+= i 1) {

		(def ref avdl_component_terrain terrain)
		(= terrain (dd_da_getDeref this.terrain_component_array i))

		(def ref avdl_node node)
		(= node (terrain.GetNode terrain))


		(dd_matrix_push)
		(dd_multMatrixf (node.GetGlobalMatrix node))
		(if (== node this.selected_node)
			(this.selected.draw)
		)
		(terrain.draw terrain)
		(dd_matrix_pop)
	})

	(dd_matrix_pop)

	(avdl_graphics_ClearDepth)

	# draw button
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)
		(this.button[i].applyTransform)
		(this.button[i].applyMatrixTransform)
		(this.button[i].drawRaw)
		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)
		(this.button[i].drawText)
		(dd_matrix_pop)
		)
	)

	# scene ?

	)
)

(class_function world_editor void clean ()
	(group
	)
)

(class_function world_editor void input (group int button int type) {

	(if (&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_DOWN))
		(group

		# button pressed
		(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
			(if (this.button[i].hasMouseCollided)
				(= this.selection i)
			)
		)

		# nothing pressed
		(if (== this.selection -1)
			(group
			(= this.mouse_pressed 1)
			(= this.mouse_pin_x (dd_mouse_x))
			(= this.mouse_pin_y (dd_mouse_y))
			)
		)

		)
	(&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_UP))
		(group

		# just clicked cube
		(if (== this.selection 2)
			(group
			(def ref avdl_node child)
			(= child (this.hierarchy2.AddChild))

			(def int childIndex)
			(= childIndex (this.hierarchy2.GetChildrenCount))

			(def ref avdl_transform t)
			(= t (child.GetLocalTransform child))
			(t.SetPosition3f t (* childIndex 1.2) 0 0)

			(def ref avdl_component_mesh com_mesh)
			(= com_mesh (avdl_node_AddComponent child avdl_component_mesh))
			(com_mesh.after_create com_mesh)

			(dd_da_empty this.mesh_component_array)
		        (avdl_node_AddComponentsToArray this.hierarchy2 this.mesh_component_array AVDL_COMPONENT_MESH_ENUM)

			(avdl_node_NodeToJson this.hierarchy2 "test.json")

#			(def int components)
#			(= components (dd_da_count this.mesh_component_array))
#			(log "found %d components" components)
#
#			(avdl_node_print this.hierarchy2)
#			(for (def int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {
#				(log "mesh %d %x %x" i (dd_da_get this.mesh_component_array i) (dd_da_getDeref this.mesh_component_array i))
#
#				(def ref avdl_component_mesh mesh)
#				(= mesh (dd_da_getDeref this.mesh_component_array i))
#
##				(log "got mesh: %x" (dd_da_getDeref this.mesh_component_array i))
#
##				(def ref avdl_node node)
##				(= node (mesh.GetNode mesh)) # PROBLEM IS HERE
##
##				#(dd_matrix_push)
##				(dd_multMatrixf (node.GetGlobalMatrix node))
##				(mesh.draw mesh)
##				#(dd_matrix_pop)
#			})

#			(def ref dd_matrix m)
#			(dd_da_pushEmpty this.hierarchy)
#			(= m (dd_da_get this.hierarchy (- (dd_da_count this.hierarchy) 1)))
#			(dd_matrix_identity m)
#			(dd_matrix_translate m (* 1 (dd_da_count this.hierarchy)) 0 0)
			(echo "added cube")
			)
		(== this.selection 0) {
			(log "forward")
			#(avdl_node_NodeToJson 
		})

		# reset input
		(= this.selection -1)
		(= this.mouse_pressed 0)
		(= this.mouse_pin_x -1)
		(= this.mouse_pin_y -1)
		)
	)

	(if (||
		(&& (== AVDL_VR 0) (== button 27))
		(&& (== AVDL_VR 1) (== button AVDL_INPUT_QUEST2_MENU))
		)
		(avdl_exit)
	# left arrow or 'a'
	(|| (== button 1) (== button 97))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksLeft 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksLeft 0)
		})
	# right arrow or 'd'
	(|| (== button 3) (== button 100))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksRight 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksRight 0)
		})
	# up arrow or 'w'
	(|| (== button 2) (== button 119))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksForward 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksForward 0)
		})
	# down arrow or 's'
	(|| (== button 4) (== button 115))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksBack 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksBack 0)
		})
	# else
		(group
		)
	)

}) # input

(class_function world_editor void ViewRotate (group float x float y)
	(group
	(dd_vec3_addf this.camera_rotation y x 0)
	(def dd_vec3 p)
	(dd_vec3_set p (this.camera_transform2.GetRotation))
	(dd_vec3_addf p y (* x -1) 0)
	(this.camera_transform2.SetRotation p)
#	(log "cam rot: %f %f %f"
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)
	)
)

(class_function world_editor void ViewTranslate (group float x float y float z)
	(group
#	(log "cam rot: %f %f %f"
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)

	(def dd_vec3 forward)
	(dd_vec3_setf forward x y z)
	(dd_vec3_rotateY forward (dd_math_dec2rad (* (dd_vec3_getY (this.camera_transform2.GetRotation)) -1)))
	(dd_vec3_rotateX forward (dd_math_dec2rad (* (dd_vec3_getX (this.camera_transform2.GetRotation)) 1)))

	(def ref dd_vec3 cam)
	(= cam (this.camera_transform2.GetPosition))
	(this.camera_transform2.SetPosition3f
		(- (dd_vec3_getX cam) (dd_vec3_getX forward))
		(+ (dd_vec3_getY cam) (dd_vec3_getY forward))
		(+ (dd_vec3_getZ cam) (dd_vec3_getZ forward))
	)

#	# left-right
#	(def dd_matrix rot)
#	(dd_matrix_identity rot)
#	(dd_matrix_rotate rot (* (dd_vec3_getY this.camera_rotation) -1)
#		0
#		1
#		0
#	)
#	(dd_matrix_rotate rot (dd_vec3_getX this.camera_rotation)
#		1
#		0
#		0
#	)
#	(def dd_vec4 cam_rot)
#	(dd_vec4_set cam_rot
#		x
#		y
#		z
#		0
#	)
#	(dd_vec4_multiply cam_rot rot)
##	(log "movement: %f %f %f %f"
##		(dd_vec4_getX cam_rot)
##		(dd_vec4_getY cam_rot)
##		(dd_vec4_getZ cam_rot)
##		(dd_vec4_getW cam_rot)
##	)
#	(dd_vec3_addf this.camera_position
#		(dd_vec4_getX cam_rot)
#		(dd_vec4_getY cam_rot)
#		(dd_vec4_getZ cam_rot)
#	)
	)
)

(class_function world_editor void AddCameraToStage {} {

	# camera
	(= this.camera_node (this.hierarchy.AddChild))
	(= this.camera_transform2 (this.camera_node.GetLocalTransform))
	(this.camera_transform2.SetPosition3f 0 3 5)

	# camera lookat
	(def ref avdl_node camera_lookat_node)
	(= camera_lookat_node (this.camera_node.AddChild))
	(def ref avdl_transform camera_lookat_transform)
	(= camera_lookat_transform (camera_lookat_node.GetLocalTransform camera_lookat_node))
	(camera_lookat_transform.SetPosition3f camera_lookat_transform 0 0 -5)
	(camera_lookat_transform.SetScale3f camera_lookat_transform 0.2 0.2 0.2)
	(def ref avdl_component_mesh camera_lookat_mesh)
	(= camera_lookat_mesh (avdl_node_AddComponent camera_lookat_node avdl_component_mesh))
	(camera_lookat_mesh.after_create camera_lookat_mesh)
	#(= this.camera_interacteer (avdl_node_AddComponent camera_lookat_node ComponentInteracteer))

})

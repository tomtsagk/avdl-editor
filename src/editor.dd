(include "editor.ddh")

(enum MODE
	MODE_NONE
	MODE_TRANSLATE_X
	MODE_TRANSLATE_Y
	MODE_TRANSLATE_Z
	MODE_ROTATE_X
	MODE_ROTATE_Y
	MODE_ROTATE_Z
	MODE_SCALE_X
	MODE_SCALE_Y
	MODE_SCALE_Z
	MODE_SCALE_UNIFORM
)

(class_function world_editor void create ()
	(group

	(avdl_engine_setFPS 120)
	(avdl_engine_setVSync 1)

	# default font
	(this.font.set (asset "assets/nishiki_teki.ttf" DD_PLY) 4)

	#(for (def int i 0) (< i 6) (= i (+ i 1))
	#	(= this.skybox_texture[i] "assets/icon_64x64.png")
	#)
#	(= this.skybox_texture[0] "assets/skybox_right_flip.png")
#	(= this.skybox_texture[1] "assets/skybox_left_flip.png")
#	(= this.skybox_texture[2] "assets/skybox_top_flip.png")
#	(= this.skybox_texture[3] "assets/skybox_bottom_flip.png")
#	(= this.skybox_texture[5] "assets/skybox_back_flip.png")
#	(= this.skybox_texture[4] "assets/skybox_front_flip.png")

#	(= this.skybox_texture[0] "assets/stormydays_right_flip.png")
#	(= this.skybox_texture[1] "assets/stormydays_left_flip.png")
#	(= this.skybox_texture[2] "assets/stormydays_top_flep.png")
#	(= this.skybox_texture[3] "assets/stormydays_bottom_flep.png")
#	(= this.skybox_texture[5] "assets/stormydays_front_flip.png")
#	(= this.skybox_texture[4] "assets/stormydays_back_flip.png")

#	(= this.skybox_texture[0] "assets/interstellar_right_flip.png")
#	(= this.skybox_texture[1] "assets/interstellar_left_flip.png")
#	(= this.skybox_texture[2] "assets/interstellar_top_flep.png")
#	(= this.skybox_texture[3] "assets/interstellar_bottom_flip.png")
#	(= this.skybox_texture[5] "assets/interstellar_front_flip.png")
#	(= this.skybox_texture[4] "assets/interstellar_back_flip.png")
#	(this.skybox.set this.skybox_texture)

	#(dd_clearColour 0.5 0.2 0.3 1.0)
	#(dd_clearColour 0.351 0.622 0.793 1.0)
	(dd_clearColour 0.5 0.1 0.2 1.0)

	# default camera
	(this.camera_position.setf 0 1 5)
	(this.camera_rotation.setf 0 0 0)

	(dd_matrix_identity this.camera_transform)
	(dd_matrix_identity this.camera_transform_rot)

	(= this.mouse_pressed 0)
	(= this.mouse_pin_x -1)
	(= this.mouse_pin_y -1)

	# grid
	(this.grid.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.grid.set_colour 0.1 0.5 0.1)

	# selection
	(this.SetSelection 0)
	(this.selected.load (asset "assets/selected.ply" DD_PLY))

	# button
	(= this.buttonTotal 3)
	#(this.button.mesh.load (asset "assets/button.ply" DD_PLY))
	(this.button[0].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[0].mesh.set_colour 1.0 1.0 1.0)
	(this.button[0].label.setFont this.font)
	(this.button[0].label.setText "^")

	(this.button[1].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[1].mesh.set_colour 1.0 1.0 1.0)
	(this.button[1].label.setFont this.font)
	(this.button[1].label.setText "v")

	(this.button[2].mesh.set_primitive AVDL_PRIMITIVE_RECTANGLE)
	(this.button[2].mesh.set_colour 1.0 1.0 1.0)
	(this.button[2].label.setFont this.font)
	(this.button[2].label.setText "Add Box")

	(= this.selection -1)

	(= this.walksForward 0)
	(= this.walksRight 0)
	(= this.walksBack 0)
	(= this.walksLeft 0)

	(= this.hierarchy2 (this.hierarchy.AddChild))
	(avdl_node_JsonToNode "test.json" this.hierarchy2)

	(avdl_node_print this.hierarchy2)
	(this.AddCameraToStage)

	(dd_da_initStructRef this.mesh_component_array avdl_component_mesh)
	(dd_da_initStructRef this.terrain_component_array avdl_component_terrain)
	(this.RefreshHierarchyArrays)

#	(= this.hierarchyUIButtonCount 5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetAnchor 0.0 0.0)
#		(this.hierarchyUIButton[i].SetPosition 0.5 (- -0.5 (* i 1.5)))
#		(this.hierarchyUIButton[i].SetSize 1.0 1.0)
#	})
#
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].SetAnchor 0.5 0.5)
#		(this.scrollHierarchy[i].SetPosition (+ 0.0 (* i 1.5)) 0.0)
#		(this.scrollHierarchy[i].SetSize 1.0 1.0)
#	})
#	(this.scrollHierarchy[0].SetOnClick this.HierarchyScrollUp this)
#	(this.scrollHierarchy[1].SetOnClick this.HierarchyScrollDown this)
#
#	(= this.hierarchyOffsetY 0)

	(= this.uiButtonsCount 15)
	(this.uiButtons[0].SetAnchor 0.0 0.0)
	(this.uiButtons[0].SetPosition 0.5 -0.5)
	(this.uiButtons[0].SetSize 1.0 1.0)
	(this.uiButtons[0].SetOnClick this.SelectNearestObject this)
	(this.uiButtons[0].SetTitle "Select Nearby")

	# change mode
	(this.uiButtons[1].SetAnchor 0.0 0.0)
	(this.uiButtons[1].SetPosition 1.5 -0.5)
	(this.uiButtons[1].SetSize 1.0 1.0)
	(this.uiButtons[1].SetOnClick this.DuplicateSelectedObject this)
	(this.uiButtons[1].SetTitle "Duplicate")

	# save scene
	(this.uiButtons[2].SetAnchor 0.0 0.0)
	(this.uiButtons[2].SetPosition 2.5 -0.5)
	(this.uiButtons[2].SetSize 1.0 1.0)
	(this.uiButtons[2].SetOnClick this.SaveScene this)
	(this.uiButtons[2].SetTitle "Save")

	# translate X
	(this.uiButtons[3].SetAnchor 0.0 1.0)
	(this.uiButtons[3].SetPosition 0.5 1.0)
	(this.uiButtons[3].SetSize 1.0 0.4)
	(this.uiButtons[3].SetOnClick this.TranslateModeX this)
	(this.uiButtons[3].SetTitle "T:X")

	# translate Y
	(this.uiButtons[4].SetAnchor 0.0 1.0)
	(this.uiButtons[4].SetPosition 0.5 0.6)
	(this.uiButtons[4].SetSize 1.0 0.4)
	(this.uiButtons[4].SetOnClick this.TranslateModeY this)
	(this.uiButtons[4].SetTitle "T:Y")

	# translate Z
	(this.uiButtons[5].SetAnchor 0.0 1.0)
	(this.uiButtons[5].SetPosition 0.5 0.2)
	(this.uiButtons[5].SetSize 1.0 0.4)
	(this.uiButtons[5].SetOnClick this.TranslateModeZ this)
	(this.uiButtons[5].SetTitle "T:Z")

	# rotate X
	(this.uiButtons[6].SetAnchor 0.0 1.0)
	(this.uiButtons[6].SetPosition 1.5 1.0)
	(this.uiButtons[6].SetSize 1.0 0.4)
	(this.uiButtons[6].SetOnClick this.RotateModeX this)
	(this.uiButtons[6].SetTitle "R:X")

	# rotate Y
	(this.uiButtons[7].SetAnchor 0.0 1.0)
	(this.uiButtons[7].SetPosition 1.5 0.6)
	(this.uiButtons[7].SetSize 1.0 0.4)
	(this.uiButtons[7].SetOnClick this.RotateModeY this)
	(this.uiButtons[7].SetTitle "R:Y")

	# rotate Z
	(this.uiButtons[8].SetAnchor 0.0 1.0)
	(this.uiButtons[8].SetPosition 1.5 0.2)
	(this.uiButtons[8].SetSize 1.0 0.4)
	(this.uiButtons[8].SetOnClick this.RotateModeZ this)
	(this.uiButtons[8].SetTitle "R:Z")

	# scale X
	(this.uiButtons[9].SetAnchor 0.0 1.0)
	(this.uiButtons[9].SetPosition 2.5 1.0)
	(this.uiButtons[9].SetSize 1.0 0.4)
	(this.uiButtons[9].SetOnClick this.ScaleModeX this)
	(this.uiButtons[9].SetTitle "S:X")

	# scale Y
	(this.uiButtons[10].SetAnchor 0.0 1.0)
	(this.uiButtons[10].SetPosition 2.5 0.6)
	(this.uiButtons[10].SetSize 1.0 0.4)
	(this.uiButtons[10].SetOnClick this.ScaleModeY this)
	(this.uiButtons[10].SetTitle "S:Y")

	# scale Z
	(this.uiButtons[11].SetAnchor 0.0 1.0)
	(this.uiButtons[11].SetPosition 2.5 0.2)
	(this.uiButtons[11].SetSize 1.0 0.4)
	(this.uiButtons[11].SetOnClick this.ScaleModeZ this)
	(this.uiButtons[11].SetTitle "S:Z")

	# scale uniform
	(this.uiButtons[12].SetAnchor 0.0 1.0)
	(this.uiButtons[12].SetPosition 3.5 0.6)
	(this.uiButtons[12].SetSize 1.0 1.2)
	(this.uiButtons[12].SetOnClick this.ScaleModeUniform this)
	(this.uiButtons[12].SetTitle "S:U")

	# delete object
	(this.uiButtons[13].SetAnchor 0.0 0.0)
	(this.uiButtons[13].SetPosition 3.5 -0.5)
	(this.uiButtons[13].SetSize 1.0 1.0)
	(this.uiButtons[13].SetOnClick this.DeleteSelectedObject this)
	(this.uiButtons[13].SetTitle "Del")

	# selected object
	(this.uiButtons[14].SetAnchor 0.5 0.0)
	(this.uiButtons[14].SetPosition 0.0 -0.25)
	(this.uiButtons[14].SetSize 1.0 0.5)

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].SetFont this.font)
	})


	(= this.mode MODE_NONE)

	# terrain shader
	(this.terrain_shader.setVertexShader
		(multistring
		"AVDL_IN vec3 colour;\n"
		"AVDL_IN vec2 texCoord;\n"

		"AVDL_OUT vec2 outTexCoord;\n"
		"AVDL_OUT vec4 outColour;\n"

		"void main() {\n"
		"       gl_Position = final_position();\n"
		"       outColour = vec4(0.0, 0.0, 0.0, 0);\n"
		"       outTexCoord  = texCoord;\n"
		"}\n"
		)
	)

	(this.terrain_shader.setFragmentShader
		(multistring
		"AVDL_IN vec4 outColour;\n"
		"AVDL_IN vec2 outTexCoord;\n"

		"uniform sampler2D image;\n"
		"uniform sampler2D image_extra_0;\n"
		"uniform sampler2D image_extra_1;\n"
		"uniform sampler2D image_extra_2;\n"
		"uniform sampler2D image_extra_3;\n"

		"void main() {\n"
		"       vec4 alpha = avdl_texture(image, outTexCoord);\n"
		"       vec4 finalCol = avdl_texture(image_extra_0, outTexCoord*10.0)"
		"               *(1 -alpha.r -alpha.g -alpha.b)"
		"               +(avdl_texture(image_extra_1, outTexCoord*10.0) *alpha.r)"
		"               +(avdl_texture(image_extra_2, outTexCoord*10.0) *alpha.g)"
		"               +(avdl_texture(image_extra_3, outTexCoord*10.0) *alpha.b)"
		"               ;\n"
		"       avdl_frag_color = finalCol;\n"
		"}\n"
		)
	)

	)
)

(class_function world_editor void onload ()
	(group
	)
)

(class_function world_editor void resize ()
	(group
	(this.button[0].setSize 1 1)
	(this.button[0].setProportionalPosition 0.85 0.15)
	(this.button[0].setProportionalWidth 0.2)
	(this.button[0].setProportionalSize 0.8)
	(this.button[0].resize)

	(this.button[1].setSize 1 1)
	(this.button[1].setProportionalPosition 0.15 0.15)
	(this.button[1].setProportionalWidth 0.2)
	(this.button[1].setProportionalSize 0.8)
	(this.button[1].resize)

	(this.button[2].setSize 1 1)
	(this.button[2].setProportionalPosition 0.85 0.85)
	(this.button[2].setProportionalWidth 0.2)
	(this.button[2].setProportionalSize 0.8)
	(this.button[2].resize)

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].resize)
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].resize)
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].resize)
#	})
	)
)

(class_function world_editor void update (group float dt)
	(group

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].update dt)
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].update dt)
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].update dt)
#	})

	(if (> this.mode MODE_NONE) {

		# calculate mouse distance
		(def float diffx)
		(= diffx (+ (- (dd_mouse_x) this.mouse_pin_x) (- (dd_mouse_y) this.mouse_pin_y)))

		# translate selected node
		(if this.selected_node {
			(def ref avdl_transform selectedTransform)
			(= selectedTransform (this.selected_node.GetLocalTransform))

			(def ref dd_vec3 selectedPos)
			(= selectedPos (selectedTransform.GetPosition selectedTransform))
			(def ref dd_vec3 selectedRot)
			(= selectedRot (selectedTransform.GetRotation selectedTransform))
			(def ref dd_vec3 selectedScale)
			(= selectedScale (selectedTransform.GetScale selectedTransform))

			# translate
			(if (== this.mode MODE_TRANSLATE_X) {
				(selectedTransform.SetPosition3f selectedTransform
					(+ (dd_vec4_getX selectedPos) (* diffx 0.01))
					(dd_vec4_getY selectedPos)
					(dd_vec4_getZ selectedPos)
				)
			}
			(== this.mode MODE_TRANSLATE_Y) {
				(selectedTransform.SetPosition3f selectedTransform
					(dd_vec4_getX selectedPos)
					(+ (dd_vec4_getY selectedPos) (* diffx 0.01))
					(dd_vec4_getZ selectedPos)
				)
			}
			(== this.mode MODE_TRANSLATE_Z) {
				(selectedTransform.SetPosition3f selectedTransform
					(dd_vec4_getX selectedPos)
					(dd_vec4_getY selectedPos)
					(+ (dd_vec4_getZ selectedPos) (* diffx 0.01))
				)
			}
			# rotate
			(== this.mode MODE_ROTATE_X) {
				(selectedTransform.SetRotation3f selectedTransform
					(+ (dd_vec4_getX selectedRot) (* diffx 0.1))
					(dd_vec4_getY selectedRot)
					(dd_vec4_getZ selectedRot)
				)
			}
			(== this.mode MODE_ROTATE_Y) {
				(selectedTransform.SetRotation3f selectedTransform
					(dd_vec4_getX selectedRot)
					(+ (dd_vec4_getY selectedRot) (* diffx 0.1))
					(dd_vec4_getZ selectedRot)
				)
			}
			(== this.mode MODE_ROTATE_Z) {
				(selectedTransform.SetRotation3f selectedTransform
					(dd_vec4_getX selectedRot)
					(dd_vec4_getY selectedRot)
					(+ (dd_vec4_getZ selectedRot) (* diffx 0.1))
				)
			}
			# scale
			(== this.mode MODE_SCALE_X) {
				(selectedTransform.SetScale3f selectedTransform
					(+ (dd_vec4_getX selectedScale) (* diffx 0.01))
					(dd_vec4_getY selectedScale)
					(dd_vec4_getZ selectedScale)
				)
			}
			(== this.mode MODE_SCALE_Y) {
				(selectedTransform.SetScale3f selectedTransform
					(dd_vec4_getX selectedScale)
					(+ (dd_vec4_getY selectedScale) (* diffx 0.01))
					(dd_vec4_getZ selectedScale)
				)
			}
			(== this.mode MODE_SCALE_Z) {
				(selectedTransform.SetScale3f selectedTransform
					(dd_vec4_getX selectedScale)
					(dd_vec4_getY selectedScale)
					(+ (dd_vec4_getZ selectedScale) (* diffx 0.01))
				)
			}
			(== this.mode MODE_SCALE_UNIFORM) {
				(selectedTransform.SetScale3f selectedTransform
					(+ (dd_vec4_getX selectedScale) (* diffx 0.01))
					(+ (dd_vec4_getY selectedScale) (* diffx 0.01))
					(+ (dd_vec4_getZ selectedScale) (* diffx 0.01))
				)
			}
			)
		})

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

	})

	# mouse is being pressed
	(if this.mouse_pressed
		(group

		# calculate mouse distance
		(def float diffx)
		(def float diffy)
		(= diffx (- (dd_mouse_x) this.mouse_pin_x))
		(= diffy (- (dd_mouse_y) this.mouse_pin_y))

		# rotate view based on mouse movement
		(this.ViewRotate (* diffx 0.1) (* diffy -0.1))

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

		)
	)

	(if (== this.selection 0)
		(this.ViewTranslate 0 0 -0.1)
	(== this.selection 1)
		(this.ViewTranslate 0 0 0.1)
	)

	(float move_x 0)
	(float move_z 0)
	(if this.walksLeft (+= move_x 0.1))
	(if this.walksRight (-= move_x 0.1))
	(if this.walksForward (-= move_z 0.1))
	(if this.walksBack (+= move_z 0.1))

	(this.ViewTranslate move_x 0 move_z)

	)
) # update

(class_function world_editor void draw ()
	(group

#	# skybox
#	(dd_matrix_push)
#	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
#	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
#	(this.skybox.draw)
#	(dd_matrix_pop)
#	(avdl_graphics_ClearDepth)

	(dd_matrix_push)

	# camera
	(dd_multMatrixf_camera (this.camera_node.GetGlobalInverseMatrix))
#	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
#	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
##	(dd_rotatef
##		1
##		(dd_vec3_getX this.camera_rotation)
##		(dd_vec3_getY this.camera_rotation)
##		(dd_vec3_getZ this.camera_rotation)
##	)
#	(dd_translatef
#		(* (dd_vec3_getX this.camera_position) -1)
#		(* (dd_vec3_getY this.camera_position) -1)
#		(* (dd_vec3_getZ this.camera_position) -1)
#	)

	# grid
	(for (def int i 0) (< i 50) (= i (+ i 1))
	(for (def int j 0) (< j 50) (= j (+ j 1))
		(group
		(dd_matrix_push)
		(dd_translatef
			(+ -5 (* i 2))
			-1
			(+ -5 (* j 2))
		)
		(dd_rotatef -90 1 0 0)
		#(dd_scalef 10 10 10)
		(this.grid.draw)
		(dd_matrix_pop)
		)
	))

	# meshes
	(for (int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {

		(def ref avdl_component_mesh mesh)
		(= mesh (dd_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode mesh))

		(dd_matrix_push)
		(dd_multMatrixf (node.GetGlobalMatrix node))
		(mesh.draw mesh)
		(dd_matrix_pop)
	})

	# draw selection
	(if this.selected_node {
		(dd_matrix_push)
		(dd_multMatrixf (this.selected_node.GetGlobalMatrix))
		(this.selected.draw)
		(dd_matrix_pop)
	})

	#(log "terrains: %d" (dd_da_count this.terrain_component_array))
	# terrains
	(for (int i 0) (< i (dd_da_count this.terrain_component_array)) (+= i 1) {

		(def ref avdl_component_terrain terrain)
		(= terrain (dd_da_getDeref this.terrain_component_array i))

		(def ref avdl_node node)
		(= node (terrain.GetNode terrain))


		(dd_matrix_push)
		(dd_multMatrixf (node.GetGlobalMatrix node))
		(if (== node this.selected_node)
			(this.selected.draw)
		)
		(this.terrain_shader.useProgram)
		(terrain.draw terrain)
		(avdl_useProgram 0)
		(dd_matrix_pop)
	})

	# camera pop
	(dd_matrix_pop)

	(avdl_graphics_ClearDepth)

	# draw button
	(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
		(group
		(dd_matrix_push)
		(this.button[i].applyTransform)
		(this.button[i].applyMatrixTransform)
		(this.button[i].drawRaw)
		(dd_translatef 0 0 0.1)
		(dd_scalef 0.3 0.3 0.3)
		(this.button[i].drawText)
		(dd_matrix_pop)
		)
	)

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].draw)
	})
#	#(this.description_button.applyTransform)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].drawDebug)
#	})
#	#(dd_matrix_push)
#	#(dd_translatef 0 this.hierarchyOffsetY 0)
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].drawDebug)
#	})
#	#(dd_matrix_pop)

	# scene ?

	)
)

(class_function world_editor void clean ()
	(group
	)
)

(class_function world_editor void input (group int button int type) {

	(if (&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_DOWN) (> this.mode MODE_NONE)) {
		(return)
	})
	(if (&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_UP) (> this.mode MODE_NONE)) {
		(= this.mode MODE_NONE)
		(return)
	})

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(if (== button AVDL_INPUT_MOUSE_LEFT) {
			(if (this.uiButtons[i].mouse_input button type) {
				(return)
			})
		})
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].mouse_input button type)
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].mouse_input button type)
#	})

#	# test ray
#	(if (&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_DOWN)) {
#		(log "mouse x y: %d %d" (dd_mouse_x) (dd_mouse_y))
#
#		# convert mouse coordinates to float
#		(def float mouseX)
#		(def float mouseY)
#		(= mouseX (dd_mouse_x))
#		(= mouseY (dd_mouse_y))
#
#		(def dd_vec4 ndc)
#		(dd_vec4_set ndc 
#			(- (* (/ mouseX (dd_window_width )) 2.0) 1.0)
#			(- (* (/ mouseY (dd_window_height)) 2.0) 1.0)
#			#0
#			#0
#			1
#			1
#		)
#		#(log "ndc x y z: %f %f %f" ndcX ndcY ndcZ)
#		(log "ndc x y z: %f %f %f"
#			(dd_vec4_getX ndc)
#			(dd_vec4_getY ndc)
#			(dd_vec4_getZ ndc)
#		)
#
#		# get inverse perspective
#		(def dd_matrix inversePerspective)
#		(dd_matrix_copy inversePerspective dd_matrix_Perspective)
#		(dd_matrix_inverse inversePerspective)
#
#		(dd_vec4_multiply ndc inversePerspective)
#		(log "ndc after perspective x y z w: %f %f %f %f"
#			(dd_vec4_getX ndc)
#			(dd_vec4_getY ndc)
#			(dd_vec4_getZ ndc)
#			(dd_vec4_getW ndc)
#		)
#		(dd_vec4_set ndc
#			(dd_vec4_getX ndc)
#			(* (dd_vec4_getY ndc) -1)
#			-1
#			1
#		)
##		(log "ndc after set x y z w: %f %f %f %f"
##			(dd_vec4_getX ndc)
##			(dd_vec4_getY ndc)
##			(dd_vec4_getZ ndc)
##			(dd_vec4_getW ndc)
##		)
#		(dd_vec4_multiply ndc (this.camera_node.GetGlobalNormalMatrix))
#		#(dd_vec4_multiplyFloat ndc (/ 1 (dd_vec4_getW ndc)))
#		#(dd_vec4_normalise ndc)
#
#		(def dd_vec3 ndc_v3)
#		(dd_vec3_setf ndc_v3
#			(dd_vec4_getX ndc)
#			(dd_vec4_getY ndc)
#			(dd_vec4_getZ ndc)
#		)
#		(dd_vec3_normalise ndc_v3)
#		(dd_vec4_set ndc
#			(dd_vec4_getX ndc)
#			(dd_vec4_getY ndc)
#			(dd_vec4_getZ ndc)
#			0
#		)
#
#		(log "ndc result x y z w: %f %f %f %f"
#			(dd_vec4_getX ndc)
#			(dd_vec4_getY ndc)
#			(dd_vec4_getZ ndc)
#			(dd_vec4_getW ndc)
#		)
#		(log "ndc_v3 result x y z: %f %f %f"
#			(dd_vec3_getX ndc_v3)
#			(dd_vec3_getY ndc_v3)
#			(dd_vec3_getZ ndc_v3)
#		)
#
#		(def dd_vec4 cam_pos)
#		(dd_vec4_set cam_pos 0 0 0 1)
#		(dd_vec4_multiply cam_pos (this.camera_node.GetGlobalMatrix))
#		(log "cam position: %f %f %f"
#			(dd_vec3_getX cam_pos)
#			(dd_vec3_getY cam_pos)
#			(dd_vec3_getZ cam_pos)
#		)
#
#		# meshes
#		(for (int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {
#	
#			(def ref avdl_component_mesh mesh)
#			(= mesh (dd_da_getDeref this.mesh_component_array i))
#	
#			(def ref avdl_node node)
#			(= node (mesh.GetNode mesh))
#	
#			(def dd_vec4 sphere_center)
#			(dd_vec4_set sphere_center 0 0 0 1)
#			(dd_vec4_multiply sphere_center (node.GetGlobalMatrix node))
#			(float sphere_radius)
#			(= sphere_radius 0.5)
#
#			(log "sphere center: %f %f %f"
#				(dd_vec3_getX sphere_center)
#				(dd_vec3_getY sphere_center)
#				(dd_vec3_getZ sphere_center)
#			)
#	
#			(def dd_vec4 length)
#			(dd_vec4_setVec4 length cam_pos)
#			(dd_vec4_substract length sphere_center)
#	
#			(def dd_vec4 length2)
#			(dd_vec4_setVec4 length2 length)
#			(dd_vec4_substractFloat length2 (* sphere_radius sphere_radius))
#	
#			(float b)
#			(float c)
#			(= b (dd_vec4_dot ndc length))
#			(= c (- (dd_vec4_dot length length) (* sphere_radius sphere_radius)))
#	
#			(float result)
#			(= result (- (* b b) c))
#	
#			(log "b c: %f %f" b c)
#			(log "result: %f" result)
#	
#			(if (< result 0) {
#				(log "no interaction")
#			}
#			(> result 0) {
#				(log "two interactions")
#				(= this.selected_node node)
#			}
#			{
#				(log "one interaction")
#				(= this.selected_node node)
#			}
#			)
##			(dd_matrix_push)
##			(dd_multMatrixf (node.GetGlobalMatrix node))
##			(if (== node this.selected_node)
##				(this.selected.draw)
##			)
##			(mesh.draw mesh)
##			(dd_matrix_pop)
#		})
#
##		(def dd_vec4 sphere_center)
##		(dd_vec4_set sphere_center 0 0 0 1)
##		(float sphere_radius)
##		(= sphere_radius 1.0)
##
##		(def dd_vec4 length)
##		(dd_vec4_setVec4 length cam_pos)
##		(dd_vec4_substract length sphere_center)
##
##		(def dd_vec4 length2)
##		(dd_vec4_setVec4 length2 length)
##		(dd_vec4_substractFloat length2 (* sphere_radius sphere_radius))
##
##		(float b)
##		(float c)
##		(= b (dd_vec4_dot ndc length))
##		(= c (- (dd_vec4_dot length length2)))
##
##		(float result)
##		(= result (- (* b b) c))
##
##		(log "b c: %f %f" b c)
##		(log "result: %f" result)
##
##		(if (< result 0) {
##			(log "no interaction")
##		}
##		(> result 0) {
##			(log "two interactions")
##		}
##		{
##			(log "one interaction")
##		}
##		)
#
##		(def dd_vec4 length)
##		(dd_vec4_set length
##			(dd_vec4_getX cam_pos)
##			(dd_vec4_getY cam_pos)
##			(dd_vec4_getZ cam_pos)
##			(dd_vec4_getW cam_pos)
##		)
##		(dd_vec4_substract length sphere_center)
##		(log "length: %f %f %f"
##			(dd_vec3_getX length)
##			(dd_vec3_getY length)
##			(dd_vec3_getZ length)
##		)
##
##		(float a)
##		(float b)
##		(float c)
##		(= a (dd_vec4_dot ndc ndc)) # dot rayDir rayDir
##		(= b (* 2.0 (dd_vec4_dot cam_pos sphere_center)))
##		(= c (- (dd_vec4_dot length length) (* sphere_radius sphere_radius)))
##
##		(float discriminant)
##		(= discriminant (- (* b b) (* 4 a c)))
##
##		(if (< discriminant 0) {
##			(log "no intersection: %f" discriminant)
##		}
##		{
##			(float sqrtDiscriminant)
##			(= sqrtDiscriminant (dd_math_sqrt discriminant))
##			(float t1)
##			(float t2)
##			(= t1 (/ (- (* b -1) sqrtDiscriminant) (* 2.0 a)))
##			(= t1 (/ (+ (* b -1) sqrtDiscriminant) (* 2.0 a)))
##			(log "intersection: %f %f" t1 t2)
##		})
#
#
##		Vector3 L = subtract(rayOrigin, sphereCenter);
##		    
##		float a = dot(rayDir, rayDir);  // Should be 1 if rayDir is normalized
##		float b = 2.0f * dot(rayDir, L);
##		float c = dot(L, L) - (radius * radius);
##				    
##		float discriminant = (b * b) - (4 * a * c);
##					    
##		if (discriminant < 0) {
##			return false; // No intersection
##		}
##
##		// Compute the two possible intersection times
##		float sqrtDiscriminant = sqrtf(discriminant);
##		*t1 = (-b - sqrtDiscriminant) / (2.0f * a);
##		*t2 = (-b + sqrtDiscriminant) / (2.0f * a);
##
##		return true;
#	})

	(if (&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_DOWN))
		(group

		# button pressed
		(for (def int i 0) (< i this.buttonTotal) (= i (+ i 1))
			(if (this.button[i].hasMouseCollided)
				(= this.selection i)
			)
		)

		# nothing pressed
		(if (== this.selection -1)
			(group
			(= this.mouse_pressed 1)
			(= this.mouse_pin_x (dd_mouse_x))
			(= this.mouse_pin_y (dd_mouse_y))
			)
		)

		)
	(&& (== button AVDL_INPUT_MOUSE_LEFT) (== type AVDL_INPUT_STATE_UP))
		(group

		# just clicked cube
		(if (== this.selection 2)
			(group
			(def ref avdl_node child)
			(= child (this.hierarchy2.AddChild))

			(def int childIndex)
			(= childIndex (this.hierarchy2.GetChildrenCount))

			(def ref avdl_transform t)
			(= t (child.GetLocalTransform child))
			(t.SetPosition3f t (* childIndex 1.2) 0 0)

			(def ref avdl_component_mesh com_mesh)
			(= com_mesh (avdl_node_AddComponent child avdl_component_mesh))
			(com_mesh.after_create com_mesh)

			(dd_da_empty this.mesh_component_array)
		        (avdl_node_AddComponentsToArray this.hierarchy2 this.mesh_component_array AVDL_COMPONENT_MESH_ENUM)

#			(def int components)
#			(= components (dd_da_count this.mesh_component_array))
#			(log "found %d components" components)
#
#			(avdl_node_print this.hierarchy2)
#			(for (def int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {
#				(log "mesh %d %x %x" i (dd_da_get this.mesh_component_array i) (dd_da_getDeref this.mesh_component_array i))
#
#				(def ref avdl_component_mesh mesh)
#				(= mesh (dd_da_getDeref this.mesh_component_array i))
#
##				(log "got mesh: %x" (dd_da_getDeref this.mesh_component_array i))
#
##				(def ref avdl_node node)
##				(= node (mesh.GetNode mesh)) # PROBLEM IS HERE
##
##				#(dd_matrix_push)
##				(dd_multMatrixf (node.GetGlobalMatrix node))
##				(mesh.draw mesh)
##				#(dd_matrix_pop)
#			})

#			(def ref dd_matrix m)
#			(dd_da_pushEmpty this.hierarchy)
#			(= m (dd_da_get this.hierarchy (- (dd_da_count this.hierarchy) 1)))
#			(dd_matrix_identity m)
#			(dd_matrix_translate m (* 1 (dd_da_count this.hierarchy)) 0 0)
			(echo "added cube")
			)
		(== this.selection 0) {
			(log "forward")
			#(avdl_node_NodeToJson 
		})

		# reset input
		(= this.selection -1)
		(= this.mouse_pressed 0)
		(= this.mouse_pin_x -1)
		(= this.mouse_pin_y -1)
		)
	)

	(if (||
		(&& (== AVDL_VR 0) (== button 27))
		(&& (== AVDL_VR 1) (== button AVDL_INPUT_QUEST2_MENU))
		)
		(avdl_exit)
	# left arrow or 'a'
	(|| (== button 1) (== button 97))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksLeft 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksLeft 0)
		})
	# right arrow or 'd'
	(|| (== button 3) (== button 100))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksRight 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksRight 0)
		})
	# up arrow or 'w'
	(|| (== button 2) (== button 119))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksForward 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksForward 0)
		})
	# down arrow or 's'
	(|| (== button 4) (== button 115))
		(if (== type AVDL_INPUT_STATE_DOWN) {
			(= this.walksBack 1)
		}
		(== type AVDL_INPUT_STATE_UP) {
			(= this.walksBack 0)
		})
	# else
		(group
		)
	)

}) # input

(class_function world_editor void ViewRotate (group float x float y)
	(group
	(dd_vec3_addf this.camera_rotation y x 0)
	(def dd_vec3 p)
	(dd_vec3_set p (this.camera_transform2.GetRotation))
	(dd_vec3_addf p y (* x -1) 0)
	(this.camera_transform2.SetRotation p)
	)
)

(class_function world_editor void ViewTranslate (group float x float y float z)
	(group
#	(log "cam rot: %f %f %f"
#		(dd_vec3_getX this.camera_rotation)
#		(dd_vec3_getY this.camera_rotation)
#		(dd_vec3_getZ this.camera_rotation)
#	)

	(def dd_vec4 forward)
	(dd_vec4_set forward (* x -1) y z 1)
	(dd_vec4_multiply forward (this.camera_node.GetGlobalNormalMatrix))

	(def ref dd_vec3 cam)
	(= cam (this.camera_transform2.GetPosition))

	(this.camera_transform2.SetPosition3f
		(+ (dd_vec4_getX cam) (dd_vec4_getX forward))
		(+ (dd_vec4_getY cam) (dd_vec4_getY forward))
		(+ (dd_vec4_getZ cam) (dd_vec4_getZ forward))
	)

#	(if (&& this.selected_node (== this.mode MODE_TRANSLATE_X)) {
#		(def ref avdl_transform selectedTransform)
#		(= selectedTransform (this.selected_node.GetLocalTransform))
#
#		(def ref dd_vec3 selectedPos)
#		(= selectedPos (selectedTransform.GetPosition selectedTransform))
#
#		(selectedTransform.SetPosition3f selectedTransform
#			(+ (dd_vec4_getX selectedPos) (dd_vec4_getX forward))
#			(+ (dd_vec4_getY selectedPos) (dd_vec4_getY forward))
#			(+ (dd_vec4_getZ selectedPos) (dd_vec4_getZ forward))
#		)
#	})

	)
)

(class_function world_editor void AddCameraToStage {} {

	# camera
	(= this.camera_node (this.hierarchy.AddChild))
	(= this.camera_transform2 (this.camera_node.GetLocalTransform))
	(this.camera_transform2.SetPosition3f 0 3 5)

	# camera lookat
	(def ref avdl_node camera_lookat_node)
	(= camera_lookat_node (this.camera_node.AddChild))
	(def ref avdl_transform camera_lookat_transform)
	(= camera_lookat_transform (camera_lookat_node.GetLocalTransform camera_lookat_node))
	(camera_lookat_transform.SetPosition3f camera_lookat_transform 0 0 -5)
	(camera_lookat_transform.SetScale3f camera_lookat_transform 0.2 0.2 0.2)
	(def ref avdl_component_mesh camera_lookat_mesh)
	(= camera_lookat_mesh (avdl_node_AddComponent camera_lookat_node avdl_component_mesh))
	(camera_lookat_mesh.after_create camera_lookat_mesh)
	#(= this.camera_interacteer (avdl_node_AddComponent camera_lookat_node ComponentInteracteer))

})

(class_function world_editor void SelectNearestObject () {
	(log "select nearest object")
	(def dd_vec4 cam)
	(dd_vec4_set cam 0 0 0 1)
	(dd_vec4_multiply cam (this.camera_node.GetGlobalMatrix))
	(log "cam: %f %f %f"
		(dd_vec4_getX cam)
		(dd_vec4_getY cam)
		(dd_vec4_getZ cam)
	)

	(float min)
	(= min 100)
	(this.SetSelection 0)

	(for (def int i 0) (< i (dd_da_count this.mesh_component_array)) (+= i 1) {
		(def ref avdl_component_mesh mesh)
		(= mesh (dd_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode mesh))

		(def dd_vec4 n)
		(dd_vec4_set n 0 0 0 1)
		(dd_vec4_multiply n (node.GetGlobalMatrix node))

		(def dd_vec4 distance)
		(dd_vec4_setVec4 distance n)
		(dd_vec4_substract distance cam)

		(if (< (dd_vec4_magnitude distance) min) {
			(= min (dd_vec4_magnitude distance))
			(this.SetSelection node)
		})

		(log "node: %f %f %f"
			(dd_vec4_getX n)
			(dd_vec4_getY n)
			(dd_vec4_getZ n)
		)
	})
})
#(class_function world_editor void HierarchyScrollUp () {
#	(+= this.hierarchyOffsetY 0.5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetPosition 0.5 (+ (- -0.5 (* i 1.5)) this.hierarchyOffsetY))
#	})
#})
#
#(class_function world_editor void HierarchyScrollDown () {
#	(-= this.hierarchyOffsetY 0.5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetPosition 0.5 (+ (- -0.5 (* i 1.5)) this.hierarchyOffsetY))
#	})
#})

(class_function world_editor void NextMode () {
#	(+= this.mode 1)
#	(= this.mode (% this.mode 2))
#	(log "mode: %d" this.mode)
})

(class_function world_editor void SaveScene () {
	(avdl_node_NodeToJson this.hierarchy2 "test.json")
})

(class_function world_editor void TranslateModeX () {
	(= this.mode MODE_TRANSLATE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void TranslateModeY () {
	(= this.mode MODE_TRANSLATE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void TranslateModeZ () {
	(= this.mode MODE_TRANSLATE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeX () {
	(= this.mode MODE_ROTATE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeY () {
	(= this.mode MODE_ROTATE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeZ () {
	(= this.mode MODE_ROTATE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeX () {
	(= this.mode MODE_SCALE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeY () {
	(= this.mode MODE_SCALE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeZ () {
	(= this.mode MODE_SCALE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeUniform () {
	(= this.mode MODE_SCALE_UNIFORM)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void DuplicateSelectedObject () {

	(if (== this.selected_node 0) {
		(log "no selected node")
		(return)
	})

	(def ref avdl_node newNode)
	(= newNode (this.selected_node.Duplicate 0))
	(if newNode {
		(this.SetSelection newNode)

		(def ref avdl_transform t)
		(= t (this.selected_node.GetLocalTransform))

		(def ref dd_vec3 pos)
		(= pos (t.GetPosition t))
		(t.SetPosition3f t
			(+ (dd_vec3_getX pos) 1)
			(dd_vec3_getY pos)
			(dd_vec3_getZ pos)
		)

		(this.RefreshHierarchyArrays)
	}
	{
		(log "failed to create duplicate")
	})

#	(def ref avdl_node parent_node)
#	(= parent_node (this.selected_node.GetParent))
#
#	(if (== parent_node 0) {
#		(log "no parent")
#		(return)
#	})
#
#	(def ref avdl_node node)
#	(= node (this.selected_node.AddChild))
#
#	(node.Copy node this.selected_node)
})

(class_function world_editor void DeleteSelectedObject () {

	(if (== this.selected_node 0) {
		(log "no selected node")
		(return)
	})

	(def ref avdl_node parentNode)
	(= parentNode (this.selected_node.GetParent))

	(parentNode.RemoveChild parentNode this.selected_node)
	(this.SetSelection 0)
	(this.RefreshHierarchyArrays)

})

(class_function world_editor void RefreshHierarchyArrays () {
	(dd_da_empty this.mesh_component_array)
	(dd_da_empty this.terrain_component_array)
        (avdl_node_AddComponentsToArray this.hierarchy2 this.mesh_component_array AVDL_COMPONENT_MESH_ENUM)
        (avdl_node_AddComponentsToArray this.hierarchy2 this.terrain_component_array AVDL_COMPONENT_TERRAIN_ENUM)
})

(class_function world_editor void SetSelection {avdl_node newSelection} {
	(= this.selected_node newSelection)
	(if newSelection
		(this.uiButtons[14].SetTitle (this.selected_node.GetName))
		(this.uiButtons[14].SetTitle "N/A")
	)
})

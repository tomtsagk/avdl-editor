(include "editor.ddh")

(enum MODE
	MODE_NONE
	MODE_TRANSLATE_X
	MODE_TRANSLATE_Y
	MODE_TRANSLATE_Z
	MODE_ROTATE_X
	MODE_ROTATE_Y
	MODE_ROTATE_Z
	MODE_SCALE_X
	MODE_SCALE_Y
	MODE_SCALE_Z
	MODE_SCALE_UNIFORM
)

(def extern avdl_string startupProject)

(class_function world_editor void create () {

	(avdl_engine_setFPS 120)
	(avdl_engine_setVSync 1)

	# default font
	(this.font.set (asset "assets/nishiki_teki.ttf" DD_PLY) 4)

	# fps counter
	(= this.fps 0)
	(= this.fps_dt 0)
	(= this.frames_count 0)
	(this.fps_label.setFont this.font)
	(this.fps_label.setText "FPS:")
	(this.fps_label_int.setFont this.font)
	(this.fps_label_int.setTextInt)

	# background colour
	(dd_clearColour 0.05 0.03 0.06 1.0)

	# default camera
	(= this.mouse_is_click 0)
	(= this.mouse_pressed 0)
	(= this.mouse_pin_x -1)
	(= this.mouse_pin_y -1)
	(= this.mouse_original_pin_x -1)
	(= this.mouse_original_pin_y -1)
	(= this.camera_follows 0)

	# selection
	(this.SetSelection 0)
	(this.selected.set_primitive AVDL_PRIMITIVE_BOX_CORNERS)
	(this.selected.set_colour 0.941 0.914 0.702)
	(this.selected.SetTypeLine 2.0)
	(dd_matrix_identity this.selected_matrix)

	(= this.walksForward 0)
	(= this.walksRight 0)
	(= this.walksBack 0)
	(= this.walksLeft 0)

	(this.AddCameraToStage)

	(avdl_da_initStructRef this.mesh_component_array avdl_component_mesh)
	(avdl_da_initStructRef this.skinned_mesh_component_array avdl_component_mesh)
	(avdl_da_initStructRef this.terrain_component_array avdl_component_terrain)
	(this.RefreshHierarchyArrays)

#	(= this.hierarchyUIButtonCount 5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetAnchor 0.0 0.0)
#		(this.hierarchyUIButton[i].SetPosition 0.5 (- -0.5 (* i 1.5)))
#		(this.hierarchyUIButton[i].SetSize 1.0 1.0)
#	})
#
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].SetAnchor 0.5 0.5)
#		(this.scrollHierarchy[i].SetPosition (+ 0.0 (* i 1.5)) 0.0)
#		(this.scrollHierarchy[i].SetSize 1.0 1.0)
#	})
#	(this.scrollHierarchy[0].SetOnClick this.HierarchyScrollUp this)
#	(this.scrollHierarchy[1].SetOnClick this.HierarchyScrollDown this)
#
#	(= this.hierarchyOffsetY 0)

	(= this.uiButtonsCount 16)
	(this.uiButtons[0].SetAnchor 0.0 0.0)
	(this.uiButtons[0].SetPosition 0.5 -0.5)
	(this.uiButtons[0].SetSize 1.0 1.0)
	(this.uiButtons[0].SetOnClick world_editor_PerformFocus this)
	(this.uiButtons[0].SetTitle "Focus")

	# change mode
	(this.uiButtons[1].SetAnchor 0.0 0.0)
	(this.uiButtons[1].SetPosition 1.5 -0.5)
	(this.uiButtons[1].SetSize 1.0 1.0)
	(this.uiButtons[1].SetOnClick world_editor_DuplicateSelectedObject this)
	(this.uiButtons[1].SetTitle "Duplicate")

	# save scene
	(this.uiButtons[2].SetAnchor 0.0 0.0)
	(this.uiButtons[2].SetPosition 2.5 -0.5)
	(this.uiButtons[2].SetSize 1.0 1.0)
	(this.uiButtons[2].SetOnClick world_editor_SaveScene this)
	(this.uiButtons[2].SetTitle "Save")

	# translate X
	(this.uiButtons[3].SetAnchor 0.0 1.0)
	(this.uiButtons[3].SetPosition 0.5 1.0)
	(this.uiButtons[3].SetSize 1.0 0.4)
	(this.uiButtons[3].SetOnClick world_editor_TranslateModeX this)
	(this.uiButtons[3].SetTitle "T:X")

	# translate Y
	(this.uiButtons[4].SetAnchor 0.0 1.0)
	(this.uiButtons[4].SetPosition 0.5 0.6)
	(this.uiButtons[4].SetSize 1.0 0.4)
	(this.uiButtons[4].SetOnClick world_editor_TranslateModeY this)
	(this.uiButtons[4].SetTitle "T:Y")

	# translate Z
	(this.uiButtons[5].SetAnchor 0.0 1.0)
	(this.uiButtons[5].SetPosition 0.5 0.2)
	(this.uiButtons[5].SetSize 1.0 0.4)
	(this.uiButtons[5].SetOnClick world_editor_TranslateModeZ this)
	(this.uiButtons[5].SetTitle "T:Z")

	# rotate X
	(this.uiButtons[6].SetAnchor 0.0 1.0)
	(this.uiButtons[6].SetPosition 1.5 1.0)
	(this.uiButtons[6].SetSize 1.0 0.4)
	(this.uiButtons[6].SetOnClick world_editor_RotateModeX this)
	(this.uiButtons[6].SetTitle "R:X")

	# rotate Y
	(this.uiButtons[7].SetAnchor 0.0 1.0)
	(this.uiButtons[7].SetPosition 1.5 0.6)
	(this.uiButtons[7].SetSize 1.0 0.4)
	(this.uiButtons[7].SetOnClick world_editor_RotateModeY this)
	(this.uiButtons[7].SetTitle "R:Y")

	# rotate Z
	(this.uiButtons[8].SetAnchor 0.0 1.0)
	(this.uiButtons[8].SetPosition 1.5 0.2)
	(this.uiButtons[8].SetSize 1.0 0.4)
	(this.uiButtons[8].SetOnClick world_editor_RotateModeZ this)
	(this.uiButtons[8].SetTitle "R:Z")

	# scale X
	(this.uiButtons[9].SetAnchor 0.0 1.0)
	(this.uiButtons[9].SetPosition 2.5 1.0)
	(this.uiButtons[9].SetSize 1.0 0.4)
	(this.uiButtons[9].SetOnClick world_editor_ScaleModeX this)
	(this.uiButtons[9].SetTitle "S:X")

	# scale Y
	(this.uiButtons[10].SetAnchor 0.0 1.0)
	(this.uiButtons[10].SetPosition 2.5 0.6)
	(this.uiButtons[10].SetSize 1.0 0.4)
	(this.uiButtons[10].SetOnClick world_editor_ScaleModeY this)
	(this.uiButtons[10].SetTitle "S:Y")

	# scale Z
	(this.uiButtons[11].SetAnchor 0.0 1.0)
	(this.uiButtons[11].SetPosition 2.5 0.2)
	(this.uiButtons[11].SetSize 1.0 0.4)
	(this.uiButtons[11].SetOnClick world_editor_ScaleModeZ this)
	(this.uiButtons[11].SetTitle "S:Z")

	# scale uniform
	(this.uiButtons[12].SetAnchor 0.0 1.0)
	(this.uiButtons[12].SetPosition 3.5 0.6)
	(this.uiButtons[12].SetSize 1.0 1.2)
	(this.uiButtons[12].SetOnClick world_editor_ScaleModeUniform this)
	(this.uiButtons[12].SetTitle "S:U")

	# delete object
	(this.uiButtons[13].SetAnchor 0.0 0.0)
	(this.uiButtons[13].SetPosition 3.5 -0.5)
	(this.uiButtons[13].SetSize 1.0 1.0)
	(this.uiButtons[13].SetOnClick world_editor_DeleteSelectedObject this)
	(this.uiButtons[13].SetTitle "Del")

	# selected object
	(this.uiButtons[14].SetAnchor 0.5 0.0)
	(this.uiButtons[14].SetPosition 0.0 -0.25)
	(this.uiButtons[14].SetSize 1.0 0.5)

	# select project
	(this.uiButtons[15].SetAnchor 0.0 0.0)
	(this.uiButtons[15].SetPosition 4.5 -0.5)
	(this.uiButtons[15].SetSize 1.0 1.0)
	(this.uiButtons[15].SetOnClick world_editor_PerformPrintCurrentProject this)
	(this.uiButtons[15].SetTitle "Project")

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].SetFont this.font)
	})


	(= this.mode MODE_NONE)

	# terrain shader
	(this.terrain_shader.setVertexShader
		(multistring
		"AVDL_IN vec3 colour;\n"
		"AVDL_IN vec2 texCoord;\n"

		"AVDL_OUT vec2 outTexCoord;\n"
		"AVDL_OUT vec4 outColour;\n"

		"void main() {\n"
		"       gl_Position = final_position();\n"
		"	outColour = vec4(colour.rgb, 0.0);\n"
		"	outTexCoord  = texCoord;\n"
		"}\n"
		)
	)

	(this.terrain_shader.setFragmentShader
		(multistring
		"AVDL_IN vec4 outColour;\n"
		"AVDL_IN vec2 outTexCoord;\n"

		"uniform sampler2D image;\n"
		"uniform sampler2D image_extra_0;\n"

		"uniform int terrain_repeat;\n"

		"void main() {\n"
			# splat map
		"	vec4 splatmap = avdl_texture(image, outTexCoord);\n"
		"	splatmap.a = 0.0;\n"
		"	int ind1 = 3;\n"
		"	int ind2 = 3;\n"
		"	for (int i = 0; i < 3; i++) {\n"
		"		if (splatmap[i] > splatmap[ind1]) {\n"
		"			ind1 = i;\n"
		"		}\n"
		"	}\n"
		"	for (int i = 0; i < 3; i++) {\n"
		"		if (splatmap[i] > splatmap[ind2] && i != ind1) {\n"
		"			ind2 = i;\n"
		"		}\n"
		"	}\n"
		"	float sum = splatmap[ind1] +splatmap[ind2];\n"
		"	float textureFactor = splatmap[ind1] /sum;\n"

		"	int ind1mod = ind1;\n"
		"	int ind2mod = ind2;\n"
		"	while (ind1mod > 2) {\n"
		"		ind1mod -= 2;\n"
		"	}\n"
		"	while (ind2mod > 2) {\n"
		"		ind2mod -= 2;\n"
		"	}\n"
		"	vec2 tileOffset  = vec2(0.0244 +float(ind1mod) *0.5, 0.0244 +(float(ind1 /2) *0.5));\n"
		"	vec2 tileOffset2 = vec2(0.0244 +float(ind2mod) *0.5, 0.0244 +(float(ind2 /2) *0.5));\n"
		"	vec2 tileSize = vec2(0.4511, 0.4511);\n"
		"	vec2 repeatUV = fract(outTexCoord *12.0);\n"
		"	vec2 finalTexCoord = tileOffset +(repeatUV *tileSize);\n"
		"	vec2 finalTexCoord2 = tileOffset2 +(repeatUV *tileSize);\n"
		"       vec4 finalCol = mix(avdl_texture(image_extra_0, finalTexCoord),"
		"               avdl_texture(image_extra_0, finalTexCoord2), 1.0 -textureFactor"
		"               );\n"
		"       avdl_frag_color = gamma_correction(finalCol);\n"
		"}\n"
		)
	)

	(this.selected_program.setVertexShader
		(multistring
		"AVDL_IN vec3 colour;\n"
		"AVDL_OUT vec4 outColour;\n"

		"void main() {\n"
		"       gl_Position = final_position();\n"
		"       outColour = vec4(colour, 1.0);\n"
		"}\n"
		)
	)

	(this.selected_program.setFragmentShader
		(multistring
		"AVDL_IN vec4 outColour;\n"

		"void main() {\n"
		"       vec4 finalCol = outColour;\n"
		"       avdl_frag_color = finalCol;\n"
		"}\n"
		)
	)

	#(this.test_mesh.load (asset "assets/selected.ply" DD_PLY))
	(this.test_mesh.set_primitive AVDL_PRIMITIVE_BOX)
	(this.test_mesh.set_colour 1.0 1.0 1.0)
	(dd_matrix_identity this.test_matrix)

	(this.test_mesh2.set_primitive AVDL_PRIMITIVE_BOX)
	(this.test_mesh2.set_colour 1.0 0.8 0.8)
	(dd_matrix_identity this.test_matrix2)

	# check project
	(this.currentProjectRoot.SetMaxCharacters 1024)
	(this.currentOpenedFile.SetMaxCharacters 1024)
	(if (startupProject.IsEmpty) {

		# attempt to find local project
		(def avdl_string mystring)
		(mystring.SetMaxCharacters 1024)
		(avdl_filesystem_GetCurrentDirectory mystring)
		(mystring.cat "/app.avdl")

		# found local project
		(if (mystring.isValid) {
			(mystring.empty)
			(avdl_filesystem_GetCurrentDirectory mystring)
			(this.SetCurrentProject mystring)
		})
		(mystring.clean)
	}
	{
		(this.SetCurrentProject startupProject)
	})

	(this.console.SetFont this.font)

})

(class_function world_editor void onload ()
	(group
	)
)

(class_function world_editor void resize ()
	(group
	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].resize)
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].resize)
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].resize)
#	})
	)
)

(class_function world_editor void update (group float dt)
	(group

	# fps calculations
	(= this.fps_dt (+ this.fps_dt dt))
	(= this.frames_count (+ this.frames_count 1))
	(if (>= this.fps_dt 1.0)
		(group
		(= this.fps this.frames_count)
		(= this.frames_count 0)
		(= this.fps_dt (- this.fps_dt 1.0))
		)
	)

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].update dt)
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].update dt)
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].update dt)
#	})

	(if (> this.mode MODE_NONE) {

		# calculate mouse distance
		(def float diffx)
		(= diffx (+ (- (dd_mouse_x) this.mouse_pin_x) (- (dd_mouse_y) this.mouse_pin_y)))

		# translate selected node
		(if this.selected_node {
			(def ref avdl_transform selectedTransform)
			(= selectedTransform (this.selected_node.GetLocalTransform))

			(def ref avdl_vec3 selectedPos)
			(= selectedPos (selectedTransform.GetPosition))
			(def ref avdl_vec3 selectedRot)
			(= selectedRot (selectedTransform.GetRotation))
			(def ref avdl_vec3 selectedScale)
			(= selectedScale (selectedTransform.GetScale))

			# translate
			(if (== this.mode MODE_TRANSLATE_X) {
				(selectedTransform.SetPosition3f
					(+ (selectedPos.X) (* diffx 0.01))
					(selectedPos.Y)
					(selectedPos.Z)
				)
			}
			(== this.mode MODE_TRANSLATE_Y) {
				(selectedTransform.SetPosition3f
					(selectedPos.X)
					(+ (selectedPos.Y) (* diffx 0.01))
					(selectedPos.Z)
				)
			}
			(== this.mode MODE_TRANSLATE_Z) {
				(selectedTransform.SetPosition3f
					(selectedPos.X)
					(selectedPos.Y)
					(+ (selectedPos.Z) (* diffx 0.01))
				)
			}
			# rotate
			(== this.mode MODE_ROTATE_X) {
				(selectedTransform.SetRotation3f
					(+ (selectedRot.X) (* diffx 0.1))
					(selectedRot.Y)
					(selectedRot.Z)
				)
			}
			(== this.mode MODE_ROTATE_Y) {
				(selectedTransform.SetRotation3f
					(selectedRot.X)
					(+ (selectedRot.Y) (* diffx 0.1))
					(selectedRot.Z)
				)
			}
			(== this.mode MODE_ROTATE_Z) {
				(selectedTransform.SetRotation3f
					(selectedRot.X)
					(selectedRot.Y)
					(+ (selectedRot.Z) (* diffx 0.1))
				)
			}
			# scale
			(== this.mode MODE_SCALE_X) {
				(selectedTransform.SetScale3f
					(+ (selectedScale.X) (* diffx 0.01))
					(selectedScale.Y)
					(selectedScale.Z)
				)
			}
			(== this.mode MODE_SCALE_Y) {
				(selectedTransform.SetScale3f
					(selectedScale.X)
					(+ (selectedScale.Y) (* diffx 0.01))
					(selectedScale.Z)
				)
			}
			(== this.mode MODE_SCALE_Z) {
				(selectedTransform.SetScale3f
					(selectedScale.X)
					(selectedScale.Y)
					(+ (selectedScale.Z) (* diffx 0.01))
				)
			}
			(== this.mode MODE_SCALE_UNIFORM) {
				(selectedTransform.SetScale3f
					(+ (selectedScale.X) (* diffx 0.01))
					(+ (selectedScale.Y) (* diffx 0.01))
					(+ (selectedScale.Z) (* diffx 0.01))
				)
			}
			)
		})

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

	})

	# mouse is being pressed
	(if this.mouse_pressed {

		# calculate mouse distance from original pin
		(float diffx)
		(float diffy)

		# when mouse goes too far, do not register as click
		(if this.mouse_is_click {
			(= diffx (- (dd_mouse_x) this.mouse_original_pin_x))
			(= diffy (- (dd_mouse_y) this.mouse_original_pin_y))
			(if (|| (> (dd_math_abs diffx) 10) (> (dd_math_abs diffy) 10)) {
				(= this.mouse_is_click 0)
			})
		})

		# calculate mouse distance
		(= diffx (- (dd_mouse_x) this.mouse_pin_x))
		(= diffy (- (dd_mouse_y) this.mouse_pin_y))

		# rotate view based on mouse movement
		(this.ViewRotate (* diffx 0.1) (* diffy -0.1))

		# save new mouse position
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))

	})

	(float move_x 0)
	(float move_z 0)
	(if this.walksLeft (+= move_x 0.1))
	(if this.walksRight (-= move_x 0.1))
	(if this.walksForward (-= move_z 0.1))
	(if this.walksBack (+= move_z 0.1))

	(if (|| (> move_x 0) (< move_x 0) (> move_z 0) (< move_z 0)) {

		# if camera is moved manually, ignore any camera follow instructions
		(= this.camera_follows 0)

		(this.ViewTranslate move_x 0 move_z)
	})

	# camera interpolating to another position
	(if this.camera_follows {
		(def avdl_vec3 camPos)
		(camPos.Set (this.camera_transform.GetPosition))

		(def avdl_vec3 diff)
		(diff.Set this.camera_follows_position)
		(diff.Subtract camPos)
		(diff.Multiply1f 0.2)

		#(log "interpolate: %f" (diff.Magnitude))

		(if (< (diff.Magnitude) 0.001) {
			(camPos.Set this.camera_follows_position)
			(= this.camera_follows 0)
		}
		{
			(camPos.Add diff)
		})
		(this.camera_transform.SetPosition camPos)
	})

	(this.console.update dt)

	)
) # update

(class_function world_editor void draw ()
	(group

	# fps counter
	(dd_matrix_push)
	(dd_translatef
		(* (dd_screen_width_get 5) -0.5 0.8)
		(* (dd_screen_height_get 5) 0.5 0.8)
		-5
	)
	(dd_scalef 0.2 0.2 0.2)
	(dd_translatef 0 -2 0)
	(this.fps_label.draw)
	(dd_translatef 3 0 0)
	(this.fps_label_int.drawInt this.fps)
	(dd_matrix_pop)


	(dd_matrix_push)

	# camera
	(dd_multMatrixf_camera (this.camera_node.GetGlobalInverseMatrix))

#	(dd_rotatef (dd_vec3_getX this.camera_rotation) -1 0 0)
#	(dd_rotatef (dd_vec3_getY this.camera_rotation) 0 1 0)
##	(dd_rotatef
##		1
##		(dd_vec3_getX this.camera_rotation)
##		(dd_vec3_getY this.camera_rotation)
##		(dd_vec3_getZ this.camera_rotation)
##	)
#	(dd_translatef
#		(* (dd_vec3_getX this.camera_position) -1)
#		(* (dd_vec3_getY this.camera_position) -1)
#		(* (dd_vec3_getZ this.camera_position) -1)
#	)

	# grid
	(this.grid.draw)

	# meshes
	(for (int i 0) (< i (avdl_da_count this.mesh_component_array)) (+= i 1) {

		(def ref avdl_component_mesh mesh)
		(= mesh (avdl_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode))

		(dd_matrix_push)
		#(dd_translatef 0 0 -5)
		(dd_multMatrixf (node.GetGlobalMatrix))
		#(if (== node this.selected_node)
			#(this.selected_program.useProgram)
			#(this.selected.draw)
			#(avdl_useProgram 0)
		#)
		(mesh.draw)
		(dd_matrix_pop)
	})

	# skinned meshes
	(for (int i 0) (< i (avdl_da_count this.skinned_mesh_component_array)) (+= i 1) {

		(def ref avdl_component_skinned_mesh mesh)
		(= mesh (avdl_da_getDeref this.skinned_mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode))

		(dd_matrix_push)
		#(dd_translatef 0 0 -5)
		(dd_multMatrixf (node.GetGlobalMatrix))
		#(if (== node this.selected_node)
			#(this.selected_program.useProgram)
			#(this.selected.draw)
			#(avdl_useProgram 0)
		#)
		(mesh.draw)
		(dd_matrix_pop)
	})

	# draw selection
	(if this.selected_node {
		(dd_matrix_push)
		#(log "selected draw")
#		(def dd_vec4 pos)
#		(dd_vec4_set pos 0 0 0 1)
#		(dd_vec4_multiply pos (this.selected_node.GetGlobalMatrix))
#		(dd_translatef
#			(dd_vec4_getX pos)
#			(dd_vec4_getY pos)
#			(dd_vec4_getZ pos)
#		)
		(dd_multMatrixf (this.selected_node.GetGlobalMatrix))
		(dd_multMatrixf this.selected_matrix)
		(this.selected_program.useProgram)
		(this.selected.draw)
		(avdl_useProgram 0)
		(dd_matrix_pop)
	})

	#(log "terrains: %d" (avdl_da_count this.terrain_component_array))
	# terrains
	(for (int i 0) (< i (avdl_da_count this.terrain_component_array)) (+= i 1) {

		(def ref avdl_component_terrain terrain)
		(= terrain (avdl_da_getDeref this.terrain_component_array i))

		(def ref avdl_node node)
		(= node (terrain.GetNode))


		(dd_matrix_push)
		(dd_multMatrixf (node.GetGlobalMatrix))
		(if (== node this.selected_node)
			(this.selected.draw)
		)
		(this.terrain_shader.useProgram)
		(terrain.draw)
		(avdl_useProgram 0)
		(dd_matrix_pop)
	})

	(dd_matrix_push)
	(dd_multMatrixf this.test_matrix)
	(this.test_mesh.draw)
	(dd_matrix_pop)

	(dd_matrix_push)
	(dd_multMatrixf this.test_matrix2)
	(this.test_mesh2.draw)
	(dd_matrix_pop)

	# camera pop
	(dd_matrix_pop)

	(avdl_graphics_ClearDepth)

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(this.uiButtons[i].draw)
	})
#	#(this.description_button.applyTransform)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].drawDebug)
#	})
#	#(dd_matrix_push)
#	#(dd_translatef 0 this.hierarchyOffsetY 0)
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].drawDebug)
#	})
#	#(dd_matrix_pop)

	(this.console.draw)

	)
)

(class_function world_editor void clean () {
})

(class_function world_editor void input {avdl_input input} {

	(if (== (input.GetButton) AVDL_INPUT_DROPFILE)  {
		(def ref avdl_string filename)
		(= filename (input.GetFilename))

		# set current project
		(if (filename.EndsIn ".avdl") {
			(this.SetCurrentProject filename)
		}
		# open file to edit
		(filename.EndsIn ".json") {
			(this.OpenNewFile filename)
		}
		# unknown file ?
		{
			(log "unknown file dropped: %s" (filename.toCharPtr))
		})
	})

	(if (&& (== (input.GetButton) AVDL_INPUT_MOUSE_LEFT) (== (input.GetState) AVDL_INPUT_STATE_DOWN) (> this.mode MODE_NONE)) {
		(return)
	})
	(if (&& (== (input.GetButton) AVDL_INPUT_MOUSE_LEFT) (== (input.GetState) AVDL_INPUT_STATE_UP) (> this.mode MODE_NONE)) {
		(= this.mode MODE_NONE)
		(return)
	})

	(for (int i 0) (< i this.uiButtonsCount) (+= i 1) {
		(if (== (input.GetButton) AVDL_INPUT_MOUSE_LEFT) {
			(if (this.uiButtons[i].mouse_input (input.GetButton) (input.GetState)) {
				(return)
			})
		})
	})
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].mouse_input (input.GetButton) (input.GetState))
#	})
#	(for (int i 0) (< i 2) (+= i 1) {
#		(this.scrollHierarchy[i].mouse_input (input.GetButton) (input.GetState))
#	})

	(if (&& (== (input.GetButton) AVDL_INPUT_MOUSE_LEFT) (== (input.GetState) AVDL_INPUT_STATE_DOWN)) {

		# nothing pressed
		(= this.mouse_is_click 1)
		(= this.mouse_pressed 1)
		(= this.mouse_pin_x (dd_mouse_x))
		(= this.mouse_pin_y (dd_mouse_y))
		(= this.mouse_original_pin_x (dd_mouse_x))
		(= this.mouse_original_pin_y (dd_mouse_y))

	}
	(&& (== (input.GetButton) AVDL_INPUT_MOUSE_LEFT) (== (input.GetState) AVDL_INPUT_STATE_UP)) {
		(if this.mouse_is_click {
			(this.PerformClick (dd_mouse_x) (dd_mouse_y))
		})
		# reset input
		(= this.mouse_is_click 0)
		(= this.mouse_pressed 0)
		(= this.mouse_pin_x -1)
		(= this.mouse_pin_y -1)
	})

	(if (||
		(&& (== AVDL_VR 0) (== (input.GetButton) 27))
		(&& (== AVDL_VR 1) (== (input.GetButton) AVDL_INPUT_QUEST2_MENU))
		)
		(avdl_exit)
	# left arrow or 'a'
	(|| (== (input.GetButton) 1) (== (input.GetButton) 97))
		(if (== (input.GetState) AVDL_INPUT_STATE_DOWN) {
			(= this.walksLeft 1)
		}
		(== (input.GetState) AVDL_INPUT_STATE_UP) {
			(= this.walksLeft 0)
		})
	# right arrow or 'd'
	(|| (== (input.GetButton) 3) (== (input.GetButton) 100))
		(if (== (input.GetState) AVDL_INPUT_STATE_DOWN) {
			(= this.walksRight 1)
		}
		(== (input.GetState) AVDL_INPUT_STATE_UP) {
			(= this.walksRight 0)
		})
	# up arrow or 'w'
	(|| (== (input.GetButton) 2) (== (input.GetButton) 119))
		(if (== (input.GetState) AVDL_INPUT_STATE_DOWN) {
			(= this.walksForward 1)
		}
		(== (input.GetState) AVDL_INPUT_STATE_UP) {
			(= this.walksForward 0)
		})
	# down arrow or 's'
	(|| (== (input.GetButton) 4) (== (input.GetButton) 115))
		(if (== (input.GetState) AVDL_INPUT_STATE_DOWN) {
			(= this.walksBack 1)
		}
		(== (input.GetState) AVDL_INPUT_STATE_UP) {
			(= this.walksBack 0)
		})
	# 'f'
	(== (input.GetButton) 102) {
		(this.PerformFocus)
	}
	# else
		(group
		)
	)

}) # input

(class_function world_editor void ViewRotate (group float x float y)
	(group
	(def avdl_vec3 p)
	(p.Set (this.camera_transform.GetRotation))
	(p.Addf y (* x -1) 0)
	(this.camera_transform.SetRotation p)
	)
)

(class_function world_editor void ViewTranslate (group float x float y float z)
	(group

	(def avdl_vec4 forward)
	(forward.Setf (* x -1) y z 1)
	(forward.MultiplyMatrix (this.camera_node.GetGlobalNormalMatrix))

	(def ref avdl_vec3 cam)
	(= cam (this.camera_transform.GetPosition))

	(this.camera_transform.SetPosition3f
		(+ (cam.X) (forward.X))
		(+ (cam.Y) (forward.Y))
		(+ (cam.Z) (forward.Z))
	)

#	(if (&& this.selected_node (== this.mode MODE_TRANSLATE_X)) {
#		(def ref avdl_transform selectedTransform)
#		(= selectedTransform (this.selected_node.GetLocalTransform))
#
#		(def ref dd_vec3 selectedPos)
#		(= selectedPos (selectedTransform.GetPosition selectedTransform))
#
#		(selectedTransform.SetPosition3f selectedTransform
#			(+ (dd_vec4_getX selectedPos) (dd_vec4_getX forward))
#			(+ (dd_vec4_getY selectedPos) (dd_vec4_getY forward))
#			(+ (dd_vec4_getZ selectedPos) (dd_vec4_getZ forward))
#		)
#	})

	)
)

(class_function world_editor void AddCameraToStage {} {

	# camera
	(= this.camera_node (this.hierarchy.AddChild))
	(= this.camera_transform (this.camera_node.GetLocalTransform))
	(this.camera_transform.SetPosition3f 0 3 5)

	# camera lookat
	(def ref avdl_node camera_lookat_node)
	(= camera_lookat_node (this.camera_node.AddChild))
	(def ref avdl_transform camera_lookat_transform)
	(= camera_lookat_transform (camera_lookat_node.GetLocalTransform))
	(camera_lookat_transform.SetPosition3f 0 0 -5)
	(camera_lookat_transform.SetScale3f 0.2 0.2 0.2)
	(def ref avdl_component_mesh camera_lookat_mesh)
	(= camera_lookat_mesh (avdl_node_AddComponent camera_lookat_node avdl_component_mesh))
	(camera_lookat_mesh.after_create)
	#(= this.camera_interacteer (avdl_node_AddComponent camera_lookat_node ComponentInteracteer))

})

(class_function world_editor void SelectNearestObject () {
#	(log "select nearest object")
	(def avdl_vec4 cam)
	(cam.Setf 0 0 0 1)
	(cam.MultiplyMatrix (this.camera_node.GetGlobalMatrix))
#	(log "cam: %f %f %f"
#		(cam.X)
#		(cam.Y)
#		(cam.Z)
#	)

	(float min)
	(= min 100)
	#(this.SetSelection 0)

	(for (def int i 0) (< i (avdl_da_count this.mesh_component_array)) (+= i 1) {
		(def ref avdl_component_mesh mesh)
		(= mesh (avdl_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode))

		(if (== node this.selected_node) (continue))

		(def avdl_vec4 n)
		(n.Setf 0 0 0 1)
		(n.MultiplyMatrix (node.GetGlobalMatrix))

		(def avdl_vec4 distance)
		(distance.Set n)
		(distance.Subtract cam)

		(if (< (distance.Magnitude) min) {
			(= min (distance.Magnitude))
			(this.SetSelection node)
		})

#		(log "node: %f %f %f"
#			(n.X)
#			(n.Y)
#			(n.Z)
#		)
	})

	(for (def int i 0) (< i (avdl_da_count this.skinned_mesh_component_array)) (+= i 1) {
		(def ref avdl_component_skinned_mesh mesh)
		(= mesh (avdl_da_getDeref this.skinned_mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode))

		(if (== node this.selected_node) (continue))

		(def avdl_vec4 n)
		(n.Setf 0 0 0 1)
		(n.MultiplyMatrix (node.GetGlobalMatrix))

		(def avdl_vec4 distance)
		(distance.Set n)
		(distance.Subtract cam)

		(if (< (distance.Magnitude) min) {
			(= min (distance.Magnitude))
			(this.SetSelection node)
		})

#		(log "node: %f %f %f"
#			(dd_vec4_getX n)
#			(dd_vec4_getY n)
#			(dd_vec4_getZ n)
#		)
	})
})

(class_function world_editor void PerformFocus () {

	(if (== this.selected_node 0) {
		(log "no node to focus on")
		(return)
	})

	(if (|| (== this.camera_node 0) (== this.camera_transform 0)) {
		(log "no camera node")
		(return)
	})

	(def avdl_vec3 desiredPosition)
	(desiredPosition.Setf 0 0 -5)
	(desiredPosition.MultiplyMatrix (this.camera_node.GetGlobalMatrix) 1)

	(def avdl_vec3 currentPosition)
	(currentPosition.Setf 0 0 0)
	(currentPosition.MultiplyMatrix (this.selected_node.GetGlobalMatrix) 1)

	(def avdl_vec3 difference)
	(difference.Set currentPosition)
	(difference.Subtract desiredPosition)

	(def avdl_vec3 camPos)
	(camPos.Set (this.camera_transform.GetPosition))

	(camPos.Setf
		(+ (camPos.X) (difference.X))
		(+ (camPos.Y) (difference.Y))
		(+ (camPos.Z) (difference.Z))
	)
	#(camPos.Print)

	(= this.camera_follows 1)
	(this.camera_follows_position.Set camPos)
	#(this.camera_transform.SetPosition camPos)

	#(log "focus position:")
	#(currentPosition.Print)
	#(difference.Print)
})
#(class_function world_editor void HierarchyScrollUp () {
#	(+= this.hierarchyOffsetY 0.5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetPosition 0.5 (+ (- -0.5 (* i 1.5)) this.hierarchyOffsetY))
#	})
#})
#
#(class_function world_editor void HierarchyScrollDown () {
#	(-= this.hierarchyOffsetY 0.5)
#	(for (int i 0) (< i this.hierarchyUIButtonCount) (+= i 1) {
#		(this.hierarchyUIButton[i].SetPosition 0.5 (+ (- -0.5 (* i 1.5)) this.hierarchyOffsetY))
#	})
#})

(class_function world_editor void NextMode () {
#	(+= this.mode 1)
#	(= this.mode (% this.mode 2))
#	(log "mode: %d" this.mode)
})

(class_function world_editor void SaveScene () {
	(if (&& this.fileHierarchy (== (this.currentOpenedFile.IsEmpty) 0)) {
		(avdl_node_NodeToJson this.fileHierarchy (this.currentOpenedFile.toCharPtr))
		(this.console.SetText "saved file")
	}
	{
		(this.console.SetText "could not save file")
	})
})

(class_function world_editor void TranslateModeX () {
	(= this.mode MODE_TRANSLATE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void TranslateModeY () {
	(= this.mode MODE_TRANSLATE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void TranslateModeZ () {
	(= this.mode MODE_TRANSLATE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeX () {
	(= this.mode MODE_ROTATE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeY () {
	(= this.mode MODE_ROTATE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void RotateModeZ () {
	(= this.mode MODE_ROTATE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeX () {
	(= this.mode MODE_SCALE_X)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeY () {
	(= this.mode MODE_SCALE_Y)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeZ () {
	(= this.mode MODE_SCALE_Z)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void ScaleModeUniform () {
	(= this.mode MODE_SCALE_UNIFORM)
	(= this.mouse_pin_x (dd_mouse_x))
	(= this.mouse_pin_y (dd_mouse_y))
})

(class_function world_editor void DuplicateSelectedObject () {

	(if (== this.selected_node 0) {
		(log "no selected node")
		(return)
	})

	(def ref avdl_node newNode)
	(= newNode (this.selected_node.Duplicate 0))
	(if newNode {
		(this.SetSelection newNode)

		(def ref avdl_transform t)
		(= t (this.selected_node.GetLocalTransform))

		(def ref avdl_vec3 pos)
		(= pos (t.GetPosition))
		(t.SetPosition3f
			(+ (pos.X) 1)
			(pos.Y)
			(pos.Z)
		)

		(this.RefreshHierarchyArrays)
	}
	{
		(log "failed to create duplicate")
	})

#	(def ref avdl_node parent_node)
#	(= parent_node (this.selected_node.GetParent))
#
#	(if (== parent_node 0) {
#		(log "no parent")
#		(return)
#	})
#
#	(def ref avdl_node node)
#	(= node (this.selected_node.AddChild))
#
#	(node.Copy node this.selected_node)
})

(class_function world_editor void DeleteSelectedObject () {

	(if (== this.selected_node 0) {
		(log "no selected node")
		(return)
	})

	(def ref avdl_node parentNode)
	(= parentNode (this.selected_node.GetParent))

	(parentNode.RemoveChild this.selected_node)
	(this.SetSelection 0)
	(this.RefreshHierarchyArrays)

})

(class_function world_editor void RefreshHierarchyArrays () {
	(avdl_da_empty this.mesh_component_array)
	(avdl_da_empty this.skinned_mesh_component_array)
	(avdl_da_empty this.terrain_component_array)
	(if this.fileHierarchy {
		(avdl_node_AddComponentsToArray this.fileHierarchy this.mesh_component_array avdl_component_mesh)
		(avdl_node_AddComponentsToArray this.fileHierarchy this.skinned_mesh_component_array avdl_component_skinned_mesh)
		(avdl_node_AddComponentsToArray this.fileHierarchy this.terrain_component_array avdl_component_terrain)
	})
	#(log "add components to array %d %d" (avdl_da_count this.mesh_component_array) (avdl_da_count this.terrain_component_array))
	(log "add skinned components to array %d" (avdl_da_count this.skinned_mesh_component_array))
})

(class_function world_editor void SetSelection {avdl_node newSelection} {
	(= this.selected_node newSelection)
	(if newSelection {
		(this.uiButtons[14].SetTitle (this.selected_node.GetName))

		# if selected something with a mesh, scale selection graphic to size of mesh
		(def ref avdl_component_mesh mesh)
		(= mesh (newSelection.GetComponent avdl_component_mesh))
		(if mesh {
			(def avdl_vec3 boundsCenter)
			(def avdl_vec3 boundsExtend)
			(boundsCenter.Set (mesh.GetBoundsCenter))
			(boundsExtend.Set (mesh.GetBoundsExtend))

			(dd_matrix_identity this.selected_matrix)
			(dd_matrix_translate this.selected_matrix (boundsCenter.X) (boundsCenter.Y) (boundsCenter.Z))
			(dd_matrix_scale this.selected_matrix (boundsExtend.X) (boundsExtend.Y) (boundsExtend.Z))
			(dd_matrix_scale this.selected_matrix 2 2 2)
		})
	}
		(this.uiButtons[14].SetTitle "N/A")
	)
})

(class_function world_editor void SetCurrentProject {avdl_string newProject} {
	(this.currentProjectRoot.empty)
	(this.currentProjectRoot.cat (newProject.toCharPtr))
	(if (this.currentProjectRoot.EndsIn ".avdl") {
		(this.currentProjectRoot.Dirname)
	})

	(this.console.SetText (this.currentProjectRoot.toCharPtr))
})

(class_function world_editor void OpenNewFile {avdl_string newFile} {

	# no project opened, for now skip
	(if (this.currentProjectRoot.IsEmpty) {
		(this.console.SetText "No project, can't open file")
		(return)
	})

	# not empty, close previous file
	(if (== (this.currentOpenedFile.IsEmpty) 0) {
		(if this.fileHierarchy {
			(this.hierarchy.RemoveChild this.fileHierarchy)
			(= this.fileHierarchy 0)
		})
	})

	(this.currentOpenedFile.empty)
	(this.currentOpenedFile.cat (newFile.toCharPtr))

	(avdl_log "opening file: %s" (this.currentOpenedFile.toCharPtr))
	(= this.fileHierarchy (this.hierarchy.AddChild))
	(avdl_node_JsonToNode (this.currentOpenedFile.toCharPtr) this.fileHierarchy)
	(this.RefreshHierarchyArrays)

})

(class_function world_editor void PerformClick {float x float y} {

	# get camera ray based on mouse click (camera space)
	(def avdl_ray3 ray)
	(avdl_screen_ScreenPositionToRay x y ray)

	#(dd_matrix_identity this.test_matrix)
	#(dd_matrix_copy this.test_matrix (this.camera_node.GetGlobalMatrix))
	#(dd_matrix_translate this.test_matrix (finalPosition.X) (finalPosition.Y) (finalPosition.Z))

	# prepare selection data
	(def ref avdl_node newSelection)
	(= newSelection 0)
	(float newSelectionDistance)
	(float closestObject)

	#(int j)
	#(= j 0)
	#(log "clicked on triangle!")
	# meshes
	(for (int i 0) (< i (avdl_da_count this.mesh_component_array)) (+= i 1) {

		#(log "check i: %d" i)
		#(+= j 1)
		#(if (> j 1) {
			#(break)
		#})

		#(log "check tree")

		(def ref avdl_component_mesh mesh)
		(= mesh (avdl_da_getDeref this.mesh_component_array i))

		(def ref avdl_node node)
		(= node (mesh.GetNode))

		# mesh's bounding box
		(def avdl_vec3 boundsCenter)
		(def avdl_vec3 boundsExtend)
		(boundsCenter.Set (mesh.GetBoundsCenter))
		(boundsExtend.Set (mesh.GetBoundsExtend))

		# create a local ray in the object's local space
		(def avdl_vec3 rayPosition2)
		(def avdl_vec3 rayDirection2)
		(rayPosition2.Set (ray.GetPosition))
		(rayPosition2.MultiplyMatrix (this.camera_node.GetGlobalMatrix) 1)
		(rayPosition2.MultiplyMatrix (node.GetGlobalInverseMatrix) 1)

		(rayDirection2.Set (ray.GetDirection))
		(rayDirection2.MultiplyMatrix (this.camera_node.GetGlobalNormalMatrix) 0)
		(rayDirection2.MultiplyMatrix (node.GetGlobalNormalInverseMatrix) 0)

		(def avdl_ray3 ray2)
		(ray2.SetPosition rayPosition2)
		(ray2.SetDirection rayDirection2)

		# keep track of the closest object, based on the ray's distance fromm the center in the mesh's local space
		(if (|| (< closestObject 0) (< (rayPosition2.Magnitude) closestObject)) {
			(= closestObject (rayPosition2.Magnitude))
		})

		# create aabb based on the mesh's bounding box
		(def avdl_collider_aabb aabb)
		(aabb.setMin
			(- (boundsCenter.X) (boundsExtend.X))
			(- (boundsCenter.Y) (boundsExtend.Y))
			(- (boundsCenter.Z) (boundsExtend.Z))
		)
		(aabb.setMax
			(+ (boundsCenter.X) (boundsExtend.X))
			(+ (boundsCenter.Y) (boundsExtend.Y))
			(+ (boundsCenter.Z) (boundsExtend.Z))
		)

#		(int isInFrontOfCamera 0)
#		(for (int j 0) (< j 6) (+= j 1) {
#			(if (< (planeCenter2.Z) 0) {
#				(= isInFrontOfCamera 1)
#			})
#		})
#
#		(if (== isInFrontOfCamera 0) {
#			#(log "not in front of camera: %s" (node.GetName))
#			(continue)
#		})

		(if (ray2.CollisionWithAABB aabb) {
			#(log "collision with aabb")
			(if (== newSelection 0) {
				(= newSelection node)
				(= newSelectionDistance closestObject)
			}
			(< closestObject newSelectionDistance) {
				(= newSelection node)
				(= newSelectionDistance closestObject)
			})
			#(log "clicked on something!")
			#(this.SetSelection node)
			#(break)
		})

	})

	# closest object that was clicked
	#(if newSelection {
	#	(this.SetSelection newSelection)
	#})
	(this.SetSelection newSelection)

})

(class_function world_editor void PerformFindProject {} {
	(log "find project")
})

(class_function world_editor void PerformPrintCurrentProject {} {
	(if (this.currentProjectRoot.IsEmpty) {
		(this.console.SetText "No project open")
	}
	{
		(this.console.SetText (this.currentProjectRoot.toCharPtr))
	})
})
